<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BindOpen.Abstractions</name>
    </assembly>
    <members>
        <member name="T:BindOpen.Extensions.Connecting.IBdoConnection">
            <summary>
            This interfaces represents a connection.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connecting.IBdoConnection.Connector">
            <summary>
            Connector.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.IBdoConnection.WithConnector(BindOpen.Extensions.Connecting.IBdoConnector)">
            <summary>
            Sets the specified connector.
            </summary>
            <param key="connector">The connector to consider.</param>
        </member>
        <member name="P:BindOpen.Extensions.Connecting.IBdoConnection.ConnectionString">
            <summary>
            The connection string.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connecting.IBdoConnection.ConnectionTimeout">
            <summary>
            The connection timeout.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connecting.IBdoConnection.State">
            <summary>
            The state.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.IBdoConnection.Connect(BindOpen.Logging.IBdoLog)">
            <summary>
            Opens a connection.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.IBdoConnection.Disconnect(BindOpen.Logging.IBdoLog)">
            <summary>
            Closes the existing connection.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Connecting.BdoConnectorAttribute">
            <summary>
            This class represents an attribute of connectors.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.BdoConnectorAttribute.#ctor">
            <summary>
            Instantiates a new instance of the ConnectorAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Connecting.IBdoConnector">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connecting.IBdoConnector.ConnectionString">
            <summary>
            The connection string of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.IBdoConnector.WithConnectionString(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connecting.IBdoConnector.ConnectionTimeOut">
            <summary>
            The connection timeout of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.IBdoConnector.WithConnectionTimeOut(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.IBdoConnector.NewConnection(BindOpen.Logging.IBdoLog)">
            <summary>
            Creates a new connection.
            </summary>
            <returns></returns>
            <param key="log">The log to consider.</param>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.IBdoConnector.UsingConnection(System.Action{BindOpen.Extensions.Connecting.IBdoConnection},System.Boolean,BindOpen.Logging.IBdoLog)">
            <summary>
            Executes the specified function.
            </summary>
            <typeparam name="Q"></typeparam>
            <param key="repository">The connected service to consider.</param>
            <param key="action">The action using the created connection and the current log to consider.</param>
            <param key="isAutoConnected">Indicates whether the connection is automatically opened.</param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.IBdoConnector.UsingConnection(System.Action{BindOpen.Extensions.Connecting.IBdoConnection,BindOpen.Logging.IBdoLog},System.Boolean,BindOpen.Logging.IBdoLog)">
            <summary>
            Executes the specified function.
            </summary>
            <param key="action">The action using the created connection and the current log to consider.</param>
            <param key="log">The log to consider.</param>
            <param key="isAutoConnected">Indicates whether the connection is automatically opened.</param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Extensions.Connecting.IBdoConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.IBdoConfiguration.GetConnectionString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.IBdoConfiguration.Add(BindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.IBdoConfiguration.WithBindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.IBdoConfiguration.WithConnectionString(System.String)">
            <summary>
            
            </summary>
            <param key="connectionString"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Extensions.Connecting.IBdoConnectorDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Connecting.ITBdoConnector`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.ITBdoConnector`1.WithConnectionString(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.ITBdoConnector`1.WithConnectionTimeOut(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.ITBdoConnector`1.NewConnection(BindOpen.Logging.IBdoLog)">
            <summary>
            Creates a new connection.
            </summary>
            <returns></returns>
            <param key="log">The log to consider.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BindOpen.Extensions.Connecting.ITBdoConnector`1.UsingConnection(System.Action{`0},System.Boolean,BindOpen.Logging.IBdoLog)" -->
        <member name="M:BindOpen.Extensions.Connecting.ITBdoConnector`1.UsingConnection(System.Action{`0,BindOpen.Logging.IBdoLog},System.Boolean,BindOpen.Logging.IBdoLog)">
            <summary>
            Executes the specified function.
            </summary>
            <param key="action">The action using the created connection and the current log to consider.</param>
            <param key="isAutoConnected">Indicates whether the connection is automatically opened.</param>
            <param key="log">The log to consider.</param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Extensions.Connecting.ITBdoConnector`2">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.ITBdoConnector`2.WithConnectionString(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.ITBdoConnector`2.WithConnectionTimeOut(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BindOpen.Extensions.Connecting.ITBdoConnector`2.UsingConnection(System.Action{`1},System.Boolean,BindOpen.Logging.IBdoLog)" -->
        <member name="M:BindOpen.Extensions.Connecting.ITBdoConnector`2.UsingConnection(System.Action{`1,BindOpen.Logging.IBdoLog},System.Boolean,BindOpen.Logging.IBdoLog)">
            <summary>
            Executes the specified function.
            </summary>
            <param key="action">The action using the created connection and the current log to consider.</param>
            <param key="isAutoConnected">Indicates whether the connection is automatically opened.</param>
            <param key="log">The log to consider.</param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Extensions.Connecting.IBdoConnected">
            <summary>
            This interfaces represents a connected service.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Connecting.IBdoConnected.Connector">
            <summary>
            The connector of the service.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.IBdoConnected.WithConnector(BindOpen.Extensions.Connecting.IBdoConnector)">
            <summary>
            Set the specified connector.
            </summary>
            <param key="connector">The BindOpen connector to consider.</param>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.IBdoConnected.UsingConnection(System.Action{BindOpen.Extensions.Connecting.IBdoConnection},System.Boolean,BindOpen.Logging.IBdoLog)">
            <summary>
            Executing the specified action during a new connection.
            </summary>
            <param key="action">The action to execute.</param>
            <param key="isAutoConnected">Indicates whether the connection must be automatically connected.</param>
        </member>
        <member name="M:BindOpen.Extensions.Connecting.IBdoConnected.UsingConnection(System.Action{BindOpen.Extensions.Connecting.IBdoConnection,BindOpen.Logging.IBdoLog},System.Boolean,BindOpen.Logging.IBdoLog)">
            <summary>
            Executing the specified action during a new connection.
            </summary>
            <param key="action">The action to execute.</param>
            <param key="log">The log to consider.</param>
            <param key="isAutoConnected">Indicates whether the connection must be automatically connected.</param>
        </member>
        <member name="T:BindOpen.Extensions.Modeling.BdoEntityAttribute">
            <summary>
            This class represents a entity attribute.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Modeling.BdoEntityAttribute.DatasourceKind">
            <summary>
            The data source kind of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.BdoEntityAttribute.#ctor">
            <summary>
            Instantiates a new instance of the EntityAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Modeling.IBdoEntity">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Modeling.IBdoEntity.Path">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Modeling.IBdoEntity.RelativePath">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.IBdoEntity.WithPath(System.String,System.String)">
            <summary>
            
            </summary>
            <param key="path"></param>
            <param key="relativePath"></param>
        </member>
        <member name="P:BindOpen.Extensions.Modeling.IBdoEntity.ParentPath">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.IBdoEntity.WithParentPath(System.String)">
            <summary>
            
            </summary>
            <param key="path"></param>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Extensions.Modeling.IBdoEntity.CreationDate">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.IBdoEntity.WithCreationDate(System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param key="date"></param>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Extensions.Modeling.IBdoEntity.Flag">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.IBdoEntity.WithFlag(System.String)">
            <summary>
            
            </summary>
            <param key="flag"></param>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Extensions.Modeling.IBdoEntity.IsReadonly">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Modeling.IBdoEntity.LastAccessDate">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.IBdoEntity.WithLastAccessDate(System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Modeling.IBdoEntity.LastWriteDate">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.IBdoEntity.WithLastWriteDate(System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param key="date"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Extensions.Modeling.IBdoConfiguration">
            <summary>
            This interface defines the entity config.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.IBdoConfiguration.Add(BindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.IBdoConfiguration.WithBindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="T:BindOpen.Extensions.Modeling.ITBdoEntity`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.ITBdoEntity`1.WithPath(System.String,System.String)">
            <summary>
            
            </summary>
            <param key="path"></param>
            <param key="relativePath"></param>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.ITBdoEntity`1.WithParentPath(System.String)">
            <summary>
            
            </summary>
            <param key="path"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.ITBdoEntity`1.WithCreationDate(System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param key="date"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.ITBdoEntity`1.WithFlag(System.String)">
            <summary>
            
            </summary>
            <param key="flag"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.ITBdoEntity`1.AsReadonly(System.Boolean)">
            <summary>
            
            </summary>
            <param key="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.ITBdoEntity`1.WithLastAccessDate(System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.ITBdoEntity`1.WithLastWriteDate(System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param key="date"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Extensions.Modeling.BdoEntityAttribute">
            <summary>
            This class represents an attribute of carriers.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.BdoEntityAttribute.#ctor">
            <summary>
            Instantiates a new instance of the EntityAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Modeling.IBdoEntity">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Modeling.IBdoConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.IBdoConfiguration.Add(BindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.IBdoConfiguration.WithBindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="P:BindOpen.Extensions.Modeling.IBdoConfiguration.Schema">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.IBdoConfiguration.WithSchema(BindOpen.Runtime.Definition.IDataSchema)">
            <summary>
            
            </summary>
            <param key="schema"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Extensions.Modeling.BdoFormatAttribute">
            <summary>
            This class represents an attribute of formats.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.BdoFormatAttribute.#ctor">
            <summary>
            Instantiates a new instance of the FormatAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Modeling.IBdoFormat">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Modeling.IBdoConfiguration">
             <summary>
            
             </summary>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.IBdoConfiguration.Add(BindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="M:BindOpen.Extensions.Modeling.IBdoConfiguration.WithBindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="T:BindOpen.Extensions.Processing.IResourceAllocation">
            <summary>
            This class represents an resource allocation.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Processing.IResourceAllocation.AllocatedResourceId">
            <summary>
            The allocated resource ID of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IResourceAllocation.WithAllocatedResourceId(System.String)">
            <summary>
            
            </summary>
            <param key="id"></param>
        </member>
        <member name="P:BindOpen.Extensions.Processing.IResourceAllocation.OwnerId">
            <summary>
            The owner ID of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IResourceAllocation.WithOwnerId(System.String)">
            <summary>
            
            </summary>
            <param key="id"></param>
        </member>
        <member name="T:BindOpen.Extensions.Processing.BdoRoutineAttribute">
            <summary>
            This class represents an attribute of routines.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Processing.BdoRoutineAttribute.#ctor">
            <summary>
            Instantiates a new instance of the RoutineAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Processing.IBdoRoutine">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IBdoRoutine.Execute(BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,System.Object,BindOpen.Data.Elements.IBdoDataElement,BindOpen.Logging.IBdoLog,System.Object[])">
            <summary>
            
            </summary>
            <param key="scope"></param>
            <param key="varSet">The variable element set to consider.</param>
            <param key="item"></param>
            <param key="dataElement"></param>
            <param key="objects"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Extensions.Processing.IBdoConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IBdoConfiguration.Add(BindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IBdoConfiguration.WithBindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="T:BindOpen.Extensions.Processing.KnownRoutineKinds">
            <summary>
            This enumeration represents the known routine kinds.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Processing.KnownRoutineKinds.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Processing.KnownRoutineKinds.ItemMustNotBeEmpty">
            <summary>
            RoutineConfiguration that checks that item is not empty.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Processing.KnownRoutineKinds.ItemMustBeInList">
            <summary>
            RoutineConfiguration that checks that item is in list.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Processing.BdoTaskAttribute">
            <summary>
            This class represents an attribute of tasks.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Processing.BdoTaskAttribute.#ctor">
            <summary>
            Instantiates a new instance of the TaskAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Processing.BdoInputAttribute">
            <summary>
            This class represents a input property attribute.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Processing.BdoInputAttribute.#ctor">
            <summary>
            Instantiates a new instance of the TaskInputAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Processing.BdoOutputAttribute">
            <summary>
            This class represents a output property attribute.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Processing.BdoOutputAttribute.#ctor">
            <summary>
            Instantiates a new instance of the TaskOutputAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Processing.IBdoTask">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IBdoTask.GetEntryObjectWithName(System.String,BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog,BindOpen.Runtime.Definition.TaskEntryKind[])">
            <summary>
            
            </summary>
            <param key="name"></param>
            <param key="scope"></param>
            <param key="varSet">The variable element set to consider.</param>
            <param key="log"></param>
            <param key="taskEntryKinds"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IBdoTask.IsCompatibleWithBindOpen.Data.Elements.IBdoMetaSpecSet,BindOpen.Runtime.Definition.TaskEntryKind)">
            <summary>
            
            </summary>
            <param key="dataSpecSet"></param>
            <param key="taskEntryKind"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IBdoTask.IsConfigurable(BindOpen.Data.SpecificationLevels)">
            <summary>
            
            </summary>
            <param key="specificationLevel"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IBdoTask.UpdateAbsolutePaths(System.String)">
            <summary>
            
            </summary>
            <param key="relativePath"></param>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IBdoTask.Execute(BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Data.RuntimeModes,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="scope"></param>
            <param key="varSet">The variable element set to consider.</param>
            <param key="runtimeMode"></param>
            <param key="log"></param>
        </member>
        <member name="T:BindOpen.Extensions.Processing.IBdoConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Processing.IBdoConfiguration.InputDetail">
            <summary>
            The input detail.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IBdoConfiguration.AddInputs(BindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IBdoConfiguration.WithInputs(BindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="P:BindOpen.Extensions.Processing.IBdoConfiguration.OutputDetail">
            <summary>
            The output detail.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IBdoConfiguration.AddOutputs(BindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IBdoConfiguration.WithOutputs(BindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IBdoConfiguration.GetEntries(BindOpen.Runtime.Definition.TaskEntryKind[])">
            <summary>
            
            </summary>
            <param key="taskEntryKinds"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IBdoConfiguration.GetEntryWithName(System.String,BindOpen.Runtime.Definition.TaskEntryKind[])">
            <summary>
            
            </summary>
            <param key="key"></param>
            <param key="taskEntryKinds"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IBdoConfiguration.Add(BindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="M:BindOpen.Extensions.Processing.IBdoConfiguration.WithBindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="T:BindOpen.Extensions.Processing.ITBdoTask`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Processing.ITBdoTask`1.UpdateAbsolutePaths(System.String)">
            <summary>
            
            </summary>
            <param key="relativePath"></param>
        </member>
        <member name="M:BindOpen.Extensions.Processing.ITBdoTask`1.Execute(BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Data.RuntimeModes,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="scope"></param>
            <param key="varSet">The variable element set to consider.</param>
            <param key="runtimeMode"></param>
            <param key="log"></param>
        </member>
        <member name="T:BindOpen.Extensions.Scripting.BdoScriptwordAttribute">
            <summary>
            This class represents a script word attribute.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.BdoScriptwordAttribute.Kind">
            <summary>
            The king of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.BdoScriptwordAttribute.Parameters">
            <summary>
            The sets of parameters of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.BdoScriptwordAttribute.RepeatedParameterName">
            <summary>
            The name of repeated parameters of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.BdoScriptwordAttribute.RepeatedParameterValueType">
            <summary>
            The value type of repeated parameters of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.BdoScriptwordAttribute.Parameter1Name">
            <summary>
            The name of parameter 1 of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.BdoScriptwordAttribute.Parameter1ValueType">
            <summary>
            The value type of parameter 1 of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.BdoScriptwordAttribute.Parameter2Name">
            <summary>
            The name of parameter 2 of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.BdoScriptwordAttribute.Parameter2ValueType">
            <summary>
            The value type of parameter 2 of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.BdoScriptwordAttribute.Parameter3Name">
            <summary>
            The name of parameter 3 of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.BdoScriptwordAttribute.Parameter3ValueType">
            <summary>
            The value type of parameter 3 of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.BdoScriptwordAttribute.Parameter4Name">
            <summary>
            The name of parameter 4 of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.BdoScriptwordAttribute.Parameter4ValueType">
            <summary>
            The value type of parameter 4 of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.BdoScriptwordAttribute.Parameter5Name">
            <summary>
            The name of parameter 5 of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.BdoScriptwordAttribute.Parameter5ValueType">
            <summary>
            The value type of parameter 5 of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.BdoScriptwordAttribute.#ctor">
            <summary>
            Instantiates a new instance of the BdoScriptwordAttribute class.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.BdoScriptwordAttribute.#ctor(System.String)">
            <summary>
            Instantiates a new instance of the BdoScriptwordAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Scripting.BdoScriptwordDefinitionAttribute">
            <summary>
            This class represents a script word definition attribute.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.BdoScriptwordDefinitionAttribute.#ctor">
            <summary>
            Instantiates a new instance of the ScriptwordDefinitionAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Scripting.IBdoScriptwordDomain">
            <summary>
            This class represents the script word domain.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDomain.Scope">
            <summary>
            The scope of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptwordDomain.WithScope(BindOpen.Runtime.Scopes.IBdoScope)">
            <summary>
            Sets the scope of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDomain.ScriptVariableSet">
            <summary>
            The variable element set of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptwordDomain.WithScriptVariableSet(BindOpen.Data.Elements.IBdoElementSet)">
            <summary>
            Sets the variable element set of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDomain.Scriptword">
            <summary>
            The script word of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptwordDomain.WithScriptword(BindOpen.Extensions.Scripting.IBdoScriptword)">
            <summary>
            Sets the script word of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Scripting.BdoScriptwordDelegate">
            <summary>
            This delegate represents a script word delegate.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Scripting.BdoScriptwordDomainedDelegate">
            <summary>
            This delegate represents a script word domained delegate.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Scripting.IBdoScriptInterpreter">
            <summary>
            This interface defines the script interpreter.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptInterpreter.Evaluate(BindOpen.Data.Items.IBdoExpression,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="exp"></param>
            <param key="varSet">The variable element set to consider.</param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptInterpreter.Evaluate``1(BindOpen.Data.Items.IBdoExpression,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="exp"></param>
            <param key="varSet">The variable element set to consider.</param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptInterpreter.Evaluate(System.String,BindOpen.Data.Items.BdoExpressionKind,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="script"></param>
            <param key="expKind">The exp kind to consider.</param>
            <param key="varSet">The variable element set to consider.</param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptInterpreter.Evaluate``1(System.String,BindOpen.Data.Items.BdoExpressionKind,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="script"></param>
            <param key="expKind">The exp kind to consider.</param>
            <param key="varSet">The variable element set to consider.</param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptInterpreter.Evaluate(BindOpen.Extensions.Scripting.IBdoScriptword,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            Evaluates the specified script word using the defined script words of this instance
            of the specified libraries.
            </summary>
            <param key="scriptword">The script word to consider.</param>
            <param key="varSet">The variable element set to use.</param>
            <param key="log">The log to consider.</param>
            <returns>The log of the interpretation task.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptInterpreter.Evaluate``1(BindOpen.Extensions.Scripting.IBdoScriptword,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            Evaluates the specified script word using the defined script words of this instance
            of the specified libraries.
            </summary>
            <param key="scriptword">The script word to consider.</param>
            <param key="varSet">The variable element set to use.</param>
            <param key="log">The log to consider.</param>
            <returns>The log of the interpretation task.</returns>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptInterpreter.FindNextScriptword(System.String,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="script"></param>
            <param key="parentScriptword"></param>
            <param key="index"></param>
            <param key="offsetIndex"></param>
            <param key="varSet">The variable element set to consider.</param>
            <param key="isSimulationModeOn"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptInterpreter.FindNextScriptword(System.String,BindOpen.Extensions.Scripting.IBdoScriptword,System.Int32@,System.Int32,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="script"></param>
            <param key="parentScriptword"></param>
            <param key="index"></param>
            <param key="offsetIndex"></param>
            <param key="varSet">The variable element set to consider.</param>
            <param key="isSimulationModeOn"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptInterpreter.IsWordMatching(BindOpen.Extensions.Scripting.IBdoScriptword,BindOpen.Extensions.Scripting.IBdoScriptwordDefinition)">
            <summary>
            
            </summary>
            <param key="scriptword"></param>
            <param key="scriptwordDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptInterpreter.GetDefinitionsWithApproximativeName(System.String,BindOpen.Extensions.Scripting.IBdoScriptwordDefinition)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <param key="parentDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptInterpreter.GetDefinitionsWithExactName(System.String,BindOpen.Extensions.Scripting.IBdoScriptwordDefinition)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <param key="parentDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptInterpreter.GetDefinitions">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Extensions.Scripting.IBdoScriptword">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptword.Kind">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptword.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptword.WithParent(BindOpen.Extensions.Scripting.IBdoScriptword)">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptword.SubScriptword">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptword.WithSubScriptword(BindOpen.Extensions.Scripting.IBdoScriptword)">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptword.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptword.WithParameters(System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptword.AddParameter(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptword.Item">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptword.WithItem(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptword.Last">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptword.Root">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Extensions.Scripting.IBdoConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoConfiguration.SubScriptword">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoConfiguration.WithSubScriptword(BindOpen.Extensions.Scripting.IBdoConfiguration)">
            <summary>
            
            </summary>
            <param key="scriptword"></param>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoConfiguration.WordKind">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoConfiguration.WithWordKind(BindOpen.Extensions.Scripting.ScriptItemKinds)">
            <summary>
            
            </summary>
            <param key="wordKind"></param>
        </member>
        <member name="T:BindOpen.Extensions.Scripting.InterpretationMode">
            <summary>
            This enumerates the possible modes of runtime.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Scripting.InterpretationMode.None">
            <summary>
            None. Never interpreted.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Scripting.InterpretationMode.Once">
            <summary>
            Once. Interpreted once at startup.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Scripting.InterpretationMode.EachTime">
            <summary>
            EachTime. Each time on use.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Scripting.IScriptItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IScriptItem.Kind">
            <summary>
            The kind.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IScriptItem.Index">
            <summary>
            The index.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Scripting.ScriptItemKinds">
            <summary>
            This enumeration lists the possible kinds of script items.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Scripting.ScriptItemKinds.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Scripting.ScriptItemKinds.Function">
            <summary>
            Function.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Scripting.ScriptItemKinds.Variable">
            <summary>
            Variable.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Scripting.ScriptItemKinds.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Scripting.ScriptItemKinds.Syntax">
            <summary>
            Syntax.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Scripting.ScriptItemKinds.Literal">
            <summary>
            Literal.
            </summary>
        </member>
        <member name="F:BindOpen.Extensions.Scripting.ScriptItemKinds.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.Scripting.ScriptItemKindExtension">
            <summary>
            This class represents an specification level extension.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.ScriptItemKindExtension.IsFunctionOrVariable(BindOpen.Extensions.Scripting.ScriptItemKinds)">
            <summary>
            Indicates whether the specified element kind is a script word kind.
            </summary>
            <param key="scriptItemKind">The kind to consider.</param>
            <returns>Returns true if the specified element is a script word kind.</returns>
        </member>
        <member name="T:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition.InputValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition.OutputValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition.RuntimeScopedFunction">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition.RuntimeBasicFunction">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition.Kind">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition.IsRepeatedParameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition.MaxParameterNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition.MinParameterNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition.ParameterSpecification">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition.RepeatedParameterDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition.RepeatedParameterName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition.RepeatedParameterValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition.CallingClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition.RuntimeFunctionName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition.GetDefaultRuntimeFunctionName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Extensions.Scripting.IBdoScriptwordDefinition.GetRepeatedParameterDescriptionText(System.String,System.String)">
            <summary>
            
            </summary>
            <param key="key"></param>
            <param key="defaultKey"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Extensions.BdoHandlerAttribute">
            <summary>
            This class represents an attribute of handlers.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.BdoHandlerAttribute.#ctor">
            <summary>
            Instantiates a new instance of the HandlerAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.BdoFunctionAttribute">
            <summary>
            This class represents an attribute of function.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.BdoFunctionAttribute.#ctor">
            <summary>
            Instantiates a new instance of the FunctionAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.IBdoExtension">
            <summary>
            This class represents a BindOpen extension runtime item.
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.ITBdoExtensionConfigurable`2">
            <summary>
            This interface defines a configurable data.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.ITBdoExtensionConfigurable`2.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.ITBdoExtensionDefinable`1">
            <summary>
            This interface defines a configurable data.
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.ITBdoExtensionDefinable`1.Definition">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.ITBdoExtension`3">
            <summary>
            This class represents a BindOpen extension runtime item.
            </summary>
        </member>
        <member name="M:BindOpen.Extensions.ITBdoExtension`3.WithDefinition(`0)">
            <summary>
            Sets the specified definition of this instance.
            </summary>
            <param key="def">The definition to consider.</param>
        </member>
        <member name="M:BindOpen.Extensions.ITBdoExtension`3.WithConfiguration(`1)">
            <summary>
            
            </summary>
            <param key="config"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Extensions.ITBdoExtensionConfiguration`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BindOpen.Extensions.ITBdoExtensionConfiguration`1.Kind">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.ITBdoExtensionConfiguration`1.DefinitionUniqueName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Extensions.ITBdoExtensionConfiguration`1.GroupId">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Extensions.ITBdoExtensionConfiguration`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:BindOpen.Logging.EventKindExtension">
            <summary>
            This class represents a event kind extension.
            </summary>
        </member>
        <member name="M:BindOpen.Logging.EventKindExtension.Max(System.Collections.Generic.List{BindOpen.Logging.EventKinds})">
            <summary>
            Gets the maximum kind of events of the specified event kinds.
            </summary>
            <param key="eventKinds">The event kinds to consider.</param>
            <returns>True if this instance has the specified events. False otherwise.</returns>
        </member>
        <member name="M:BindOpen.Logging.EventKindExtension.Max(BindOpen.Logging.EventKinds,BindOpen.Logging.EventKinds)">
            <summary>
            Gets the maximum between the two specified event kinds.
            </summary>
            <param key="eventKind1">The first event kind to consider.</param>
            <param key="eventKind2">The second event kind to consider.</param>
            <returns>True if the first event kind is greater than the second one.</returns>
        </member>
        <member name="M:BindOpen.Logging.EventKindExtension.IsGreaterThan(BindOpen.Logging.EventKinds,BindOpen.Logging.EventKinds)">
            <summary>
            Indicates whether the first event kind is greater than the second one.
            </summary>
            <param key="eventKind1">The first event kind to consider.</param>
            <param key="eventKind2">The second event kind to consider.</param>
            <returns>True if the first event kind is greater than the second one.</returns>
        </member>
        <member name="T:BindOpen.Logging.EventKinds">
            <summary>
            This enumeration lists the possible event kinds.
            </summary>
        </member>
        <member name="F:BindOpen.Logging.EventKinds.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Logging.EventKinds.Message">
            <summary>
            Message.
            </summary>
        </member>
        <member name="F:BindOpen.Logging.EventKinds.Checkpoint">
            <summary>
            Checkpoint.
            </summary>
        </member>
        <member name="F:BindOpen.Logging.EventKinds.Warning">
            <summary>
            Warning.
            </summary>
        </member>
        <member name="F:BindOpen.Logging.EventKinds.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:BindOpen.Logging.EventKinds.Exception">
            <summary>
            Exception.
            </summary>
        </member>
        <member name="F:BindOpen.Logging.EventKinds.Other">
            <summary>
            Other.
            </summary>
        </member>
        <member name="F:BindOpen.Logging.EventKinds.Any">
            <summary>
            None.
            </summary>
        </member>
        <member name="T:BindOpen.Logging.IBdoLog">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.WithDisplayName(System.String)">
            <summary>
            
            </summary>
            <param key="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.WithDescription(System.String)">
            <summary>
            
            </summary>
            <param key="description"></param>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Logging.IBdoLog.Level">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Logging.IBdoLog.Task">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.WithTask(BindOpen.Extensions.Processing.IBdoConfiguration)">
            <summary>
            
            </summary>
            <param key="task"></param>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Logging.IBdoLog.SubLogs">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.HasSubLog">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Logging.IBdoLog.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.WithParent(BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="parent"></param>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Logging.IBdoLog.Root">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.InsertSubLog(System.Predicate{BindOpen.Logging.IBdoLog},BindOpen.Logging.EventKinds,System.String,BindOpen.Data.Criticalities,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param key="filterFinder"></param>
            <param key="eventKind"></param>
            <param key="title"></param>
            <param key="criticality"></param>
            <param key="description"></param>
            <param key="resultCode"></param>
            <param key="source"></param>
            <param key="date"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.AddSubLog(System.Predicate{BindOpen.Logging.IBdoLog},BindOpen.Logging.EventKinds,System.String,BindOpen.Data.Criticalities,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param key="filterFinder"></param>
            <param key="eventKind"></param>
            <param key="title"></param>
            <param key="criticality"></param>
            <param key="description"></param>
            <param key="resultCode"></param>
            <param key="source"></param>
            <param key="date"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.AddSubLog(BindOpen.Logging.IBdoLog,System.Predicate{BindOpen.Logging.IBdoLog},BindOpen.Logging.EventKinds,System.String,BindOpen.Data.Criticalities,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param key="childLog"></param>
            <param key="logFinder"></param>
            <param key="eventKind"></param>
            <param key="title"></param>
            <param key="criticality"></param>
            <param key="description"></param>
            <param key="resultCode"></param>
            <param key="source"></param>
            <param key="date"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.AddCheckpoint(System.String,BindOpen.Data.Criticalities,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.Logging.IBdoLog,System.Predicate{BindOpen.Logging.IBdoLog})">
            <summary>
            
            </summary>
            <param key="title"></param>
            <param key="criticality"></param>
            <param key="description"></param>
            <param key="resultCode"></param>
            <param key="source"></param>
            <param key="date"></param>
            <param key="childLog"></param>
            <param key="logFinder"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.AddError(System.String,BindOpen.Data.Criticalities,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.Logging.IBdoLog,System.Predicate{BindOpen.Logging.IBdoLog})">
            <summary>
            
            </summary>
            <param key="title"></param>
            <param key="criticality"></param>
            <param key="description"></param>
            <param key="resultCode"></param>
            <param key="source"></param>
            <param key="date"></param>
            <param key="childLog"></param>
            <param key="logFinder"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.AddException(System.Exception,BindOpen.Data.Criticalities,System.String,System.String,BindOpen.Logging.IBdoLog,System.Predicate{BindOpen.Logging.IBdoLog})">
            <summary>
            
            </summary>
            <param key="exception"></param>
            <param key="criticality"></param>
            <param key="resultCode"></param>
            <param key="source"></param>
            <param key="childLog"></param>
            <param key="logFinder"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.AddException(System.String,BindOpen.Data.Criticalities,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.Logging.IBdoLog,System.Predicate{BindOpen.Logging.IBdoLog})">
            <summary>
            
            </summary>
            <param key="title"></param>
            <param key="criticality"></param>
            <param key="description"></param>
            <param key="resultCode"></param>
            <param key="source"></param>
            <param key="date"></param>
            <param key="childLog"></param>
            <param key="logFinder"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.AddMessage(System.String,BindOpen.Data.Criticalities,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.Logging.IBdoLog,System.Predicate{BindOpen.Logging.IBdoLog})">
            <summary>
            
            </summary>
            <param key="title"></param>
            <param key="criticality"></param>
            <param key="description"></param>
            <param key="resultCode"></param>
            <param key="source"></param>
            <param key="date"></param>
            <param key="childLog"></param>
            <param key="logFinder"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.AddWarning(System.String,BindOpen.Data.Criticalities,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.Logging.IBdoLog,System.Predicate{BindOpen.Logging.IBdoLog})">
            <summary>
            
            </summary>
            <param key="title"></param>
            <param key="criticality"></param>
            <param key="description"></param>
            <param key="resultCode"></param>
            <param key="source"></param>
            <param key="date"></param>
            <param key="childLog"></param>
            <param key="logFinder"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.AddEvent(BindOpen.Logging.EventKinds,System.String,BindOpen.Data.Criticalities,System.String,System.String,System.String,System.Nullable{System.DateTime},BindOpen.Logging.IBdoLog,System.Predicate{BindOpen.Logging.IBdoLog})">
            <summary>
            
            </summary>
            <param key="kind"></param>
            <param key="title"></param>
            <param key="criticality"></param>
            <param key="description"></param>
            <param key="resultCode"></param>
            <param key="source"></param>
            <param key="date"></param>
            <param key="childLog"></param>
            <param key="logFinder"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.AddEventsTo(BindOpen.Logging.IBdoLog,System.Predicate{BindOpen.Logging.IBdoLog},BindOpen.Logging.EventKinds[])">
            <summary>
            Adds the events of this instance to the specified log.
            </summary>
            <param key="log">The log to consider.</param>
            <param key="logFinder"></param>
            <param key="kinds"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.AddEventsTo(BindOpen.Logging.IBdoLog,BindOpen.Logging.EventKinds[])">
            <summary>
            Adds the events of this instance to the specified log.
            </summary>
            <param key="log">The log to consider.</param>
            <param key="kinds"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.HasEvent(BindOpen.Logging.EventKinds[])">
            <summary>
            
            </summary>
            <param key="kinds"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.HasEvent(System.Boolean,BindOpen.Logging.EventKinds[])">
            <summary>
            
            </summary>
            <param key="isRecursive"></param>
            <param key="kinds"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.AddEvents(BindOpen.Logging.IBdoLog,System.Predicate{BindOpen.Logging.IBdoLog},BindOpen.Logging.EventKinds[])">
            <summary>
            Adds the specified events to this instance.
            </summary>
            <param key="log">The log to consider.</param>
            <param key="logFinder"></param>
            <param key="kinds"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.AddEvents(BindOpen.Logging.IBdoLog,BindOpen.Logging.EventKinds[])">
            <summary>
            Adds the specified events to this instance.
            </summary>
            <param key="log">The log to consider.</param>
            <param key="kinds"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.ClearEvents(System.Boolean,BindOpen.Logging.EventKinds[])">
            <summary>
            
            </summary>
            <param key="isRecursive"></param>
            <param key="kinds"></param>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.GetEventCount(System.Boolean,BindOpen.Logging.EventKinds[])">
            <summary>
            
            </summary>
            <param key="isRecursive"></param>
            <param key="kinds"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.GetMaxEventKind(System.Boolean,BindOpen.Logging.EventKinds[])">
            <summary>
            
            </summary>
            <param key="isRecursive"></param>
            <param key="kinds"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.GetSubLogWithId(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param key="id"></param>
            <param key="isRecursive"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.NewLog">
            <summary>
            Creates a new instance of IBdoLog.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.RemoveSubLog(BindOpen.Logging.IBdoLog,System.Boolean)">
            <summary>
            
            </summary>
            <param key="childLog"></param>
            <param key="isRecursive"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.RemoveSubLog(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param key="id"></param>
            <param key="isRecursive"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.Clone(BindOpen.Logging.IBdoLog,System.String[])">
            <summary>
            Clones this instance considering the parent log.
            </summary>
            <param key="parent"></param>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.Clone``1(BindOpen.Logging.IBdoLog,System.String[])">
            <summary>
            Clones this instance considering the parent log.
            </summary>
            <param key="parent"></param>
        </member>
        <member name="P:BindOpen.Logging.IBdoLog.Execution">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.WithExecution(BindOpen.Logging.IProcessExecution)">
            <summary>
            
            </summary>
            <param key="execution"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.Sanitize">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Logging.IBdoLog.End(BindOpen.Data.ProcessExecutionStatus)">
            <summary>
            
            </summary>
            <param key="status"></param>
        </member>
        <member name="T:BindOpen.Logging.IProcessExecution">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Logging.IProcessExecution.CustomStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Logging.IProcessExecution.Detail">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Logging.IProcessExecution.Duration">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Logging.IProcessExecution.EndDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Logging.IProcessExecution.Location">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Logging.IProcessExecution.ProgressIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Logging.IProcessExecution.ProgressMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Logging.IProcessExecution.RestartDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Logging.IProcessExecution.ResultLevel">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Logging.IProcessExecution.StartDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Logging.IProcessExecution.State">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Logging.IProcessExecution.Status">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Logging.IProcessExecution.End(BindOpen.Data.ProcessExecutionStatus)">
            <summary>
            
            </summary>
            <param key="status"></param>
        </member>
        <member name="M:BindOpen.Logging.IProcessExecution.Restart">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Logging.IProcessExecution.Resume">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Logging.IProcessExecution.Start">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Conditions.AdvancedConditionKind">
            <summary>
            This enumeration lists the possible view advanced condition kinds.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Conditions.AdvancedConditionKind.And">
            <summary>
            And.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Conditions.AdvancedConditionKind.Or">
            <summary>
            Or.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Conditions.ConditionOperator">
            <summary>
            This enumeration lists all the possible operators of conditions.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Conditions.ConditionOperator.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Conditions.ConditionOperator.Exist">
            <summary>
            Exist.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Conditions.ConditionOperator.EqualTo">
            <summary>
            EqualTo.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Conditions.ConditionOperator.LesserThan">
            <summary>
            LesserThan.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Conditions.ConditionOperator.GreaterThan">
            <summary>
            GreaterThan.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Conditions.ConditionOperator.DifferentFrom">
            <summary>
            DifferentFrom.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Conditions.IAdvancedCondition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Conditions.IAdvancedCondition.Kind">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Conditions.IAdvancedCondition.Conditions">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Conditions.IBasicCondition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Conditions.IBasicCondition.Argument1">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Conditions.IBasicCondition.Argument2">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Conditions.IBasicCondition.Operator">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Conditions.ICondition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Conditions.ICondition.TrueValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Conditions.ICondition.AsTrue(System.Boolean)">
            <summary>
            
            </summary>
            <param key="value"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Conditions.IScriptCondition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Conditions.IScriptCondition.Expression">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Conditions.IScriptCondition.WithExpression(BindOpen.Data.Items.IBdoExpression)">
            <summary>
            
            </summary>
            <param key="expression"></param>
        </member>
        <member name="T:BindOpen.Data.Context.IBdoDataContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Context.IBdoDataContext.SingletonItems">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Context.IBdoDataContext.ScopedItems">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Context.IBdoDataContext.TransientItems">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Context.IBdoDataContext.Id">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Context.IBdoDataContext.AddItem(System.String,System.Object,System.String,BindOpen.Data.PersistenceLevels)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <param key="item"></param>
            <param key="contextSectionName"></param>
            <param key="persistenceLevel"></param>
        </member>
        <member name="M:BindOpen.Data.Context.IBdoDataContext.AddScopedItem(System.String,System.Object,System.String)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <param key="item"></param>
            <param key="contextSectionName"></param>
        </member>
        <member name="M:BindOpen.Data.Context.IBdoDataContext.AddSingletonItem(System.String,System.Object,System.String)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <param key="item"></param>
            <param key="contextSectionName"></param>
        </member>
        <member name="M:BindOpen.Data.Context.IBdoDataContext.AddSystemItem(System.String,System.Object)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <param key="item"></param>
        </member>
        <member name="M:BindOpen.Data.Context.IBdoDataContext.AddTransientItem(System.String,System.Object,System.String)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <param key="item"></param>
            <param key="contextSectionName"></param>
        </member>
        <member name="M:BindOpen.Data.Context.IBdoDataContext.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Context.IBdoDataContext.ClearItems(BindOpen.Data.PersistenceLevels)">
            <summary>
            
            </summary>
            <param key="persistenceLevel"></param>
        </member>
        <member name="M:BindOpen.Data.Context.IBdoDataContext.GetItem(System.String,System.String,BindOpen.Data.PersistenceLevels)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <param key="contextSectionName"></param>
            <param key="persistenceLevel"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Context.IBdoDataContext.GetScopedItem(System.String,System.String)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <param key="contextSectionName"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Context.IBdoDataContext.GetSingletonItem(System.String,System.String)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <param key="contextSectionName"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Context.IBdoDataContext.GetSystemItem(System.String)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Context.IBdoDataContext.GetTransientItem(System.String,System.String)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <param key="contextSectionName"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Context.IBdoDataContext.Merge(BindOpen.Data.Context.IBdoDataContext)">
            <summary>
            
            </summary>
            <param key="dataContext"></param>
        </member>
        <member name="M:BindOpen.Data.Context.IBdoDataContext.RemoveItems(System.String,BindOpen.Data.PersistenceLevels)">
            <summary>
            
            </summary>
            <param key="contextSectionName"></param>
            <param key="persistenceLevel"></param>
        </member>
        <member name="T:BindOpen.Data.Elements.BdoDataAttribute">
            <summary>
            This class represents a data element attribute.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.BdoDataAttribute.GroupId">
            <summary>
            ID of the group of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.BdoDataAttribute.ValueType">
            <summary>
            The value type of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.BdoDataAttribute.Aliases">
            <summary>
            The aliases of the entry.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.BdoDataAttribute.IsAllocatable">
            <summary>
            Indicates whether the instance can be allocated.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.BdoDataAttribute.AvailableValueModes">
            <summary>
            The available itemization modes of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.BdoDataAttribute.DefaultStringItems">
            <summary>
            Default string items of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.BdoDataAttribute.MinimumItemNumber">
            <summary>
            Minimum item number of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.BdoDataAttribute.MaximumItemNumber">
            <summary>
            Maximum item number of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.BdoDataAttribute.IsValueList">
            <summary>
            Indicates whether the value of this instance is a list.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.BdoDataAttribute.ItemRequirementLevel">
            <summary>
            The item requirement level of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.BdoDataAttribute.ItemSpecificationLevels">
            <summary>
            Levels of specification of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.BdoDataAttribute.#ctor">
            <summary>
            Instantiates a new instance of the BdoElementAttribute class.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.BdoDataAttribute.#ctor(System.String)">
            <summary>
            Instantiates a new instance of the BdoElementAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Elements.BdoDataElementAreaKind">
            <summary>
            This enumeration lists the possible kinds of data areas.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Elements.BdoDataElementAreaKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Elements.BdoDataElementAreaKind.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Elements.BdoDataElementAreaKind.Element">
            <summary>
            Element attributes.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoEntity">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoEntity.DefinitionUniqueName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoEntity.WithDefinitionUniqueName(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoEntitySpec">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoEntitySpec.DefinitionFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoEntitySpec.WithDefinitionFilter(BindOpen.Data.Specification.IStringFilter)">
            <summary>
            
            </summary>
            <param key="filter"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoDataObject">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoDataObjectSpec">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataObjectSpec.ClassFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataObjectSpec.WithClassFilter(BindOpen.Data.Specification.IStringFilter)">
            <summary>
            
            </summary>
            <param key="filter"></param>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataObjectSpec.DefinitionFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataObjectSpec.WithDefinitionFilter(BindOpen.Data.Specification.IStringFilter)">
            <summary>
            
            </summary>
            <param key="filter"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoDataDocument">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataDocument.ContainerElement">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoDataDocumentSpec">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoDataElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElement.ValueMode">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElement.WithValueMode(BindOpen.Data.Items.DataValueMode)">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElement.ItemReference">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElement.WithItemReference(BindOpen.Data.Items.IBdoExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElement.ItemScript">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElement.WithItemScript(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElement.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElement.WithDataValueType(BindOpen.Data.DataValueTypes)">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElement.Specs">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElement.GetSpecification(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElement.WithSpecifications(BindOpen.Data.Elements.IBdoDataElementSpec[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElement.NewSpecification">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElement.IsCompatibleWithData(System.Object)">
            <summary>
            Indicates whether this instance is compatible with the specified item.
            </summary>
            <param key="item">The item to consider.</param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElement.ClearItem">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElement.WithItem(System.Object[])">
            <summary>
            
            </summary>
            <param key="objs"></param>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElement.GetItem(BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="scope"></param>
            <param key="varSet"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElement.GetItem``1(BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <typeparam name="Q"></typeparam>
            <param key="scope"></param>
            <param key="varSet"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoDataElementExtensions">
            <summary>
            This class represents an extension of the DataValueType enumeration.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElementExtensions.GetItemList(BindOpen.Data.Elements.IBdoDataElement,BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="element"></param>
            <param key="scope"></param>
            <param key="varSet"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElementExtensions.GetItemList``1(BindOpen.Data.Elements.IBdoDataElement,BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <typeparam name="Q"></typeparam>
            <param key="element"></param>
            <param key="scope"></param>
            <param key="varSet"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElementExtensions.GetFirstItem(BindOpen.Data.Elements.IBdoDataElement,BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="element"></param>
            <param key="scope"></param>
            <param key="varSet"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElementExtensions.GetFirstItem``1(BindOpen.Data.Elements.IBdoDataElement,BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="element"></param>
            <param key="scope"></param>
            <param key="varSet"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoDataElementSpec">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElementSpec.Condition">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElementSpec.WithCondition(BindOpen.Data.Conditions.ICondition)">
            <summary>
            
            </summary>
            <param key="condition"></param>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElementSpec.Aliases">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElementSpec.WithAliases(System.String[])">
            <summary>
            
            </summary>
            <param key="aliases"></param>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElementSpec.SubSpecs">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElementSpec.WithSubSpecs(BindOpen.Data.Elements.IBdoDataElementSpec[])">
            <summary>
            
            </summary>
            <param key="specs"></param>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElementSpec.GetSubSpec(System.String)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElementSpec.AvailableValueModes">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElementSpec.WithAvailableValueModes(BindOpen.Data.Items.DataValueMode[])">
            <summary>
            
            </summary>
            <param key="modes"></param>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElementSpec.ConstraintStatement">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElementSpec.WithConstraintStatement(BindOpen.Data.Specification.IBdoConfigurationSet)">
            <summary>
            
            </summary>
            <param key="statement"></param>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElementSpec.IsAllocatable">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElementSpec.AsAllocatable(System.Boolean)">
            <summary>
            
            </summary>
            <param key="isAllocatable"></param>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElementSpec.IsValueList">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElementSpec.ItemRequirementLevel">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElementSpec.ItemScript">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElementSpec.WithItemScript(System.String)">
            <summary>
            
            </summary>
            <param key="script"></param>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElementSpec.ItemSpecificationLevels">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElementSpec.WithItemSpecificationLevels(BindOpen.Data.SpecificationLevels[])">
            <summary>
            
            </summary>
            <param key="levels"></param>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElementSpec.MaximumItemNumber">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElementSpec.WithMaximumItemNumber(System.Int32)">
            <summary>
            
            </summary>
            <param key="number"></param>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElementSpec.MinimumItemNumber">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElementSpec.WithMinimumItemNumber(System.Int32)">
            <summary>
            
            </summary>
            <param key="number"></param>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataElementSpec.DefaultItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataElementSpec.WithDefaultItem(System.Object)">
            <summary>
            
            </summary>
            <param key="item"></param>
        </member>
        <member name="T:BindOpen.Data.Elements.ITBdoDataElement`3">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.ITBdoDataElement`3.Specs">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.ITBdoDataElement`3.NewSpecification">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Elements.ITBdoDataElement`3.GetSpecification(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.ITBdoDataElement`3.ClearItem">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Elements.ITBdoDataElement`3.WithItem(`2[])">
            <summary>
            
            </summary>
            <param key="objs"></param>
        </member>
        <member name="M:BindOpen.Data.Elements.ITBdoDataElement`3.WithValueMode(BindOpen.Data.Items.DataValueMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.ITBdoDataElement`3.WithItemReference(BindOpen.Data.Items.IBdoExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.ITBdoDataElement`3.WithItemScript(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.ITBdoDataElement`3.WithDataValueType(BindOpen.Data.DataValueTypes)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.ITBdoDataElement`3.WithIndex(System.Nullable{System.Int32})">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.ITBdoDataElement`3.WithSpecifications(BindOpen.Data.Elements.IBdoDataElementSpec[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.ITBdoDataElement`3.GetItemList(BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="scope"></param>
            <param key="varSet"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Elements.ITBdoDataElement`3.GetFirstItem(BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="scope"></param>
            <param key="varSet"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoDataObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataObject.ClassFullName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataObject.WithClassFullName(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataObject.DefinitionUniqueName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataObject.WithDefinitionUniqueName(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoDataObjectSpec">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataObjectSpec.ClassFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataObjectSpec.WithClassFilter(BindOpen.Data.Specification.IStringFilter)">
            <summary>
            
            </summary>
            <param key="filter"></param>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataObjectSpec.DefinitionFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataObjectSpec.WithDefinitionFilter(BindOpen.Data.Specification.IStringFilter)">
            <summary>
            
            </summary>
            <param key="filter"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoDataScalar">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoDataScalarSpec">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoElementSet">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoElementSet.GetSpecIds">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoElementSet.Get(System.String,System.String)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <param key="specId"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoElementSet.GetItem(System.String,BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="key"></param>
            <param key="scope"></param>
            <param key="varSet">The variable element set to consider.</param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoElementSet.GetItem``1(System.String,BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param key="key"></param>
            <param key="scope"></param>
            <param key="varSet">The variable element set to consider.</param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoElementSet.GetItemList(System.String,BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="key"></param>
            <param key="scope"></param>
            <param key="varSet"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoElementSet.GetItemList``1(System.String,BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <typeparam name="Q"></typeparam>
            <param key="key"></param>
            <param key="scope"></param>
            <param key="varSet"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoMetaSpecSet">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoDataSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataSource.DefinitionUniqueName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataSource.WithDefinitionUniqueName(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Elements.IBdoDataSourceSpec">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataSourceSpec.DatasourceKind">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataSourceSpec.WithDatasourceKind(BindOpen.Data.Items.DatasourceKind)">
            <summary>
            
            </summary>
            <param key="filter"></param>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Data.Elements.IBdoDataSourceSpec.DefinitionFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Elements.IBdoDataSourceSpec.WithDefinitionFilter(BindOpen.Data.Specification.IStringFilter)">
            <summary>
            
            </summary>
            <param key="filter"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.CommonHelper">
            <summary>
            This class represents a common helper.
            </summary>
        </member>
        <member name="M:BindOpen.Data.CommonHelper.IsNullOrEmpty(System.String,System.Action)">
            <summary>
            Executes the specified action if the specified value is null or empry.
            </summary>
            <param key="value">The value to consider.</param>
            <param key="action">The action to consider.</param>
        </member>
        <member name="M:BindOpen.Data.CommonHelper.If(System.Boolean,System.Action)">
            <summary>
            Executes the specified action if the specified value is true.
            </summary>
            <param key="value">The value to consider.</param>
            <param key="action">The action to consider.</param>
        </member>
        <member name="T:BindOpen.Data.FileHelper">
            <summary>
            This class represents a helper for files.
            </summary>
        </member>
        <member name="M:BindOpen.Data.FileHelper.CreateDirectory(System.String,BindOpen.Logging.IBdoLog)">
            <summary>
            Creates the specified file directory if it does not exist.
            </summary>
            <param key="folderPath">The path of the file directory to consider.</param>
            <param key="log">The log to append.</param>
            <returns>Returns True whether the directory exists henceforth. False otherwise.</returns>
        </member>
        <member name="M:BindOpen.Data.FileHelper.ToPath(System.String)">
            <summary>
            Converts the specified path according to the environment.
            </summary>
            <param key="st">The string to consider.</param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.FileHelper.GetConcatenatedPath(System.String,System.String)">
            <summary>
            Converts the specified path according to the environment.
            </summary>
            <param key="path">The path to consider.</param>
            <param key="rootPath">The root path to consider.</param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.FileHelper.GetAppRootFolderPath">
            <summary>
            Gets the path of the application root folder.
            </summary>
            <returns>Returns the path.</returns>
        </member>
        <member name="M:BindOpen.Data.FileHelper.DeleteExpiredFiles(System.String,System.Int32,System.String)">
            <summary>
            Delete the files that are older than the specified day number.
            </summary>
            <param key="folderPath">The folder path to consider.</param>
            <param key="expirationDayNumber">The number of expiration days to consider.</param>
            <param key="fileFormat">The file format to consider.</param>
            <remarks>With expiration day number equaling to -1, no files expires. Equaling to 0, all files except the current one expires.</remarks>
        </member>
        <member name="T:BindOpen.Data.ObjectHelper">
            <summary>
            This class represents a helper for objects.
            </summary>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.GetAt(System.Collections.IList,System.Int32)">
            <summary>
            Returns the string representation of the specified object.
            </summary>
            <param key="obj">The object to consider.</param>
            <param key="index">The index to consider.</param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.ToBdoKey(System.Object)">
            <summary>
            Returns the key representing the specified object i.e. in lower case and empty if null.
            </summary>
            <param key="object1">The object to consider.</param>
            <returns>Returns the key representing the specified object.</returns>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.BdoKeyEquals(System.Object,System.Object)">
            <summary>
            Indicates whether the key representing the specified object i.e. in lower case and empty if null.
            </summary>
            <param key="object1">The object to consider.</param>
            <param key="object2">The object to compare with.</param>
            <returns>Returns True if the keys of the considered objects equal.</returns>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.ToNotNullString(System.Object)">
            <summary>
            Returns the string representation of the specified object.
            </summary>
            <param key="object1">The object to consider.</param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.ToString(System.Object,BindOpen.Data.DataValueTypes,System.Boolean)">
            <summary>
            Returns the string value from an object based on this instance's specification.
            </summary>
            <param key="obj">The object value to convert.</param>
            <param key="valueType">The value type to consider.</param>
            <param key="isScriptMode">Indicates whether the script mode is activated.</param>
            <returns>The result string.</returns>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.Update(System.Object,System.Object)">
            <summary>
            Gets the result of the serialization of the specified object.
            </summary>
            <param key="obj">The object to serialize.</param>
            <param key="updateObj">The update object to consider.</param>
            <returns>The Xml string serializing the specified object.</returns>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.GetString(System.Collections.Generic.List{System.Object},System.Int32)">
            <summary>
            Gets the object at the specified index from the specified index.
            </summary>
            <param key="objects">The objects to consider.</param>
            <param key="index">The index to consider.</param>
            <returns>Returns the normalized string.</returns>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.Get``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Gets the object at the specified index from the specified index.
            </summary>
            <param key="objects">The objects to consider.</param>
            <param key="index">The index to consider.</param>
            <returns>Returns the normalized string.</returns>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.Get``1(System.Collections.Generic.List{System.Object},System.Int32,System.Func{System.Object,``0})">
            <summary>
            Gets the object at the specified index from the specified index.
            </summary>
            <param key="objects">The objects to consider.</param>
            <param key="index">The index to consider.</param>
            <returns>Returns the normalized string.</returns>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.First``1(System.Collections.Generic.List{System.Object},System.Int32,System.Func{System.Object,``0})">
            <summary>
            Gets the object at the specified index from the specified index.
            </summary>
            <param key="objects">The objects to consider.</param>
            <param key="index">The index to consider.</param>
            <returns>Returns the normalized string.</returns>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.Using``1(``0,System.Action{``0})">
            <summary>
            Using the specified item executing the specified action.
            </summary>
            <typeparam name="T">A type deriving from data item.</typeparam>
            <param key="item">The item to use.</param>
            <param key="action">The action to execute.</param>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.GetPropertyInfo(System.Type,System.String,System.Type[],BindOpen.Data.Elements.BdoDataAttribute@)">
            <summary>
            Gets information of the specified property.
            </summary>
            <param key="objectType">The object type to consider.</param>
            <param key="propertyName">The property name to consider.</param>
            <param key="attributeTypes"></param>
            <param key="attribute">The attribute to return.</param>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.UpdateFromElementSet(System.Object,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            Sets information of the specified property.
            </summary>
            <param key="obj">The object to update.</param>
            <param key="metaSet">The set of elements to return.</param>
            <param key="scope">The scope to consider.</param>
            <param key="varSet">The variable element set to use.</param>
            <param key="log">The log to consider.</param>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.UpdateFromElementSet``1(System.Object,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            Sets information of the specified property.
            </summary>
            <param key="obj">The object to update.</param>
            <param key="metaSet">The set of elements to return.</param>
            <param key="scope">The scope to consider.</param>
            <param key="varSet">The variable element set to use.</param>
            <param key="log">The log to consider.</param>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the specified property.
            </summary>
            <typeparam name="T">The class to consider.</typeparam>
            <param key="property">The property expression to consider.</param>
            <returns>Returns the property information.</returns>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.ToByteArray(System.String,System.Text.Encoding)">
            <summary>
            Creates a byte array from the string, using the 
            System.Text.Encoding.Default encoding unless another is specified.
            </summary>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.GetEnumFields(System.Type)">
            <summary>
            Gets the fields of the specified enumeration.
            </summary>
            <typeparam name="type">The enumeration type to consider.</typeparam>
            <returns>Returns the string array.</returns>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.ToBdoElementItem(System.Object,BindOpen.Data.Elements.IBdoDataElementSpec)">
            <summary>
            
            </summary>
            <param key="obj"></param>
            <param key="spec"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.IsList(System.Type)">
            <summary>
            
            </summary>
            <param key="type"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.ObjectHelper.IsNumeric(System.Type)">
            <summary>
            
            </summary>
            <param key="type"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.ObjectNotationHelper">
            <summary>
            This class represents a helper for object notation.
            </summary>
        </member>
        <member name="M:BindOpen.Data.ObjectNotationHelper.CloneDataRow(System.Data.DataRow,System.Data.DataTable)">
            <summary>
            Clones the specified data row into the specified data table.
            </summary>
            <param key="dataRow">The data row to clone.</param>
            <param key="dataTable">The data table that receives the cloned datatable.</param>
            <returns>The cloned data row.</returns>
        </member>
        <member name="T:BindOpen.Data.StringHelper">
            <summary>
            This structure represents a string helper.
            </summary>
        </member>
        <member name="F:BindOpen.Data.StringHelper.__UniqueToken">
            <summary>
            The unique token.
            </summary>
        </member>
        <member name="F:BindOpen.Data.StringHelper.__PatternEmptyValue">
            <summary>
            The pattern empty value.
            </summary>
        </member>
        <member name="F:BindOpen.Data.StringHelper.__NoneString">
            <summary>
            The string that is returned when the instance is not found.
            </summary>
        </member>
        <member name="F:BindOpen.Data.StringHelper.__DateFormat">
            <summary>
            The string that is returned when the instance is not found.
            </summary>
        </member>
        <member name="F:BindOpen.Data.StringHelper.__TimeFormat">
            <summary>
            The string that is returned when the instance is not found.
            </summary>
        </member>
        <member name="M:BindOpen.Data.StringHelper.GeneratePassword(System.Int32)">
            <summary>
            Generates a password.
            </summary>
            <param key="charNumber">The character number to consider.</param>
            <returns>Returns the generated password.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.CountOccurences(System.String,System.String)">
            <summary>
            Gets the number of occurences of a specfied character in the specified string.
            </summary>
            <param key="st">The string to consider.</param>
            <param key="subString">The sub string to consider.</param>
            <returns>The number of occurences of a specfied character in the specified string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.CheckNameFormat(System.String,System.Int32)">
            <summary>
            Returns the string value of the specified settings.
            </summary>
            <param key="stringValue">string value to consider.</param>
            <param key="limitSize">Limit string size to consider.</param>
            <returns>The string value of the specified settings.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.ToShortString(System.String,System.Int32,System.String)">
            <summary>
            Gets the string shorten to the specified characters.
            </summary>
            <param key="st">The string to consider.</param>
            <param key="charNumber">The number of characters to consider.</param>
            <param key="addedString">Indicates whether dots are added.</param>
            <returns>Returns the specified string shorten.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.HashString(System.String,System.String)">
            <summary>
            Hashes the string.
            </summary>
            <param key="st">The string to hash.</param>
            <param key="hashName">The name of the algorithm to consider.</param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.ToSubstring(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the specified sub string.
            </summary>
            <param key="st">The string to consider.</param>
            <param key="startIndex">The start index to consider.</param>
            <param key="endIndex">The end index to consider.</param>
            <returns>The formated path.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.StartingWithSystem.String,System.String)">
            <summary>
            Gets the string with the specified starting string.
            </summary>
            <param key="st">The string to consider.</param>
            <param key="startingString">The starting string to consider.</param>
            <returns>The formated path.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.EndingWithSystem.String,System.String)">
            <summary>
            Gets the string with the specified ending string.
            </summary>
            <param key="st">The string to consider.</param>
            <param key="endingString">The ending string to consider.</param>
            <returns>The formated path.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.ToFormatedString(System.String,System.Int32,System.String,System.String)">
            <summary>
            Formats the specified string replacing the specified index by the specified string.
            </summary>
            <param key="st">The string to consider.</param>
            <param key="index">The index to consider.</param>
            <param key="replaceString">The replacement string to consider.</param>
            <param key="wholeReplaceString">The whole replacement string to consider.</param>
            <example>The string should be formated this way: {0} {1} or { .. {0} .. } { .. {1} .. } and so on.</example>
            <returns>The formated string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.IndexOfLastString(System.String,System.String,System.Int32@)">
            <summary>
            Gets the index of the last sub string in the specified string.
            </summary>
            <param key="st">The string to consider.</param>
            <param key="stv">The string to search.</param>
            <param key="startIndex">The start index to consider.</param>
            <returns>The formated string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.IndexOfLastString(System.String,System.String,System.Int32)">
            <summary>
            Gets the index of the last sub string in the specified string.
            </summary>
            <param key="st">The string to consider.</param>
            <param key="stv">The string to search.</param>
            <param key="startIndex">The start index to consider.</param>
            <returns>The formated string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.NewGuid">
            <summary>
            Generates a new short ID.
            </summary>
            <returns>Returns a new short ID.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.NewShortId">
            <summary>
            Generates a new short ID.
            </summary>
            <returns>Returns a new short ID.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.IndexOfNextString(System.String,System.String,System.Int32@)">
            <summary>
            Gets the index of the next sub string in the specified string.
            </summary>
            <param key="st">The string to consider.</param>
            <param key="stv">The string to search.</param>
            <param key="startIndex">The start index to consider.</param>
            <returns>The formated string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.Sanitize(System.String)">
            <summary>
            Sanitizes the specified string.
            </summary>
            <param key="st">The string to consider.</param>
            <returns>The formated string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.IndexOfNextString(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Gets the index of the next sub string in the specified string.
            </summary>
            <param key="st">The string to consider.</param>
            <param key="stv">The string to search.</param>
            <param key="startIndex">The start index to consider.</param>
            <param key="stringComparison">The string comparison to consider.</param>
            <returns>The formated string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.ToString(System.Nullable{System.DateTime})">
            <summary>
            Gets the date string of this instance.
            </summary>
            <param key="date">The date to consider.</param>
            <returns>Returns the date string of this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.ToString(System.DateTime)">
            <summary>
            Gets the date string of this instance.
            </summary>
            <param key="date">The date to consider.</param>
            <returns>Returns the date string of this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.ToNormalizedName(System.String)">
            <summary>
            Gets the normalized string from the specified string.
            </summary>
            <param key="st">The string to normalize.</param>
            <returns>Returns the normalized string.</returns>
            <remarks>The normalized string is a string in which only the alphanumeric characters and _ are allowed.</remarks>
        </member>
        <member name="M:BindOpen.Data.StringHelper.ToTitleCasedName(System.String)">
            <summary>
            Gets the titled string from the specified string.
            </summary>
            <param key="st">The string to normalize.</param>
            <returns>Returns the normalized string.</returns>
            <remarks>The normalized string is a string in which only the alphanumeric characters and _ are allowed.</remarks>
        </member>
        <member name="M:BindOpen.Data.StringHelper.GetAtIndex(System.Collections.Generic.IList{System.String},System.Int32)">
            <summary>
            Gets the string at the specified index from the specified index.
            </summary>
            <param key="strings">The objects to consider.</param>
            <param key="index">The index to consider.</param>
            <returns>Returns the normalized string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.GetAtIndex(System.String[],System.Int32)">
            <summary>
            Gets the string at the specified index from the specified index.
            </summary>
            <param key="strings">The objects to consider.</param>
            <param key="index">The index to consider.</param>
            <returns>Returns the normalized string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.Concatenate(System.String,System.String,System.String)">
            <summary>
            Concatenates the two specified string only if the second one starts with the specified character. Returns the second string otherwise.
            </summary>
            <param key="st1">The first string to concatenate.</param>
            <param key="st2">The second string to concatenate.</param>
            <param key="charString">The string value to consider.</param>
            <returns>Returns the concatenated string.</returns>
            <remarks>If the leading char is null then the two strings are always concatenated.</remarks>
        </member>
        <member name="M:BindOpen.Data.StringHelper.If(System.String,System.Boolean,System.String)">
            <summary>
            Sets the first string as the second one if the specified condition is statisfied.
            </summary>
            <param key="st1">The first string to concatenate.</param>
            <param key="condition">The condition to consider.</param>
            <param key="st2">The second string to concatenate.</param>
            <returns>Returns the concatenated string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.ConcatenateIf(System.String,System.Boolean,System.String)">
            <summary>
            Concatenates the first string with the second one if the specified condition is statisfied.
            </summary>
            <param key="st1">The first string to concatenate.</param>
            <param key="condition">The condition to consider.</param>
            <param key="st2">The second string to concatenate.</param>
            <returns>Returns the concatenated string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.ConcatenateIfFirstNotEmpty(System.String,System.String)">
            <summary>
            Concatenates the first string with the second only if the first one is not empty.
            </summary>
            <param key="st1">The first string to concatenate.</param>
            <param key="st2">The second string to concatenate.</param>
            <returns>Returns the concatenated string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.ConcatenateIfSecondNotEmpty(System.String,System.String)">
            <summary>
            Concatenates the first string with the second only if the second one is not empty.
            </summary>
            <param key="st1">The first string to concatenate.</param>
            <param key="st2">The second string to concatenate.</param>
            <returns>Returns the concatenated string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.Excluding(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            Excludes the specified string items from the specified string items.
            </summary>
            <param key="stringItems">The string items to consider.</param>
            <param key="excludingStringItems">The string items to exclude.</param>
            <returns>Returns the excluded string items.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.Excluding(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Excludes the specified string items from the specified string items.
            </summary>
            <param key="stringItems">The string items to consider.</param>
            <param key="excludingStringItems">The string items to exclude.</param>
            <returns>Returns the excluded string items.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.Adding(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            Adds the specified string items from the specified string items.
            </summary>
            <param key="stringItems">The string items to consider.</param>
            <param key="addingStringItems">The string items to add.</param>
            <returns>Returns the added string items.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.Adding(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the specified string items from the specified string items.
            </summary>
            <param key="stringItems">The string items to consider.</param>
            <param key="addingStringItems">The string items to add.</param>
            <returns>Returns the added string items.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.ToQuoted(System.String)">
            <summary>
            Gets the quoted string.
            </summary>
            <param key="st">The string to normalize.</param>
            <returns>Returns the quoted string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.ToUnquoted(System.String,System.Char)">
            <summary>
            Gets the unquoted string.
            </summary>
            <param key="st">The string to normalize.</param>
            <param key="quoteChar">The quote character to consider.</param>
            <returns>Returns the quoted string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.ToObject(System.String,BindOpen.Data.DataValueTypes,System.String)">
            <summary>
            Gets the object from the specified string.
            </summary>
            <param key="st">The string to consider.</param>
            <param key="valueType">The value type to consider.</param>
            <param key="textFormat">The text format to consider.</param>
            <returns>Returns the object corresponding to the specified string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.ToDateTime(System.String,System.String)">
            <summary>
            Gets the date time object from the specified string.
            </summary>
            <param key="st">The string to consider.</param>
            <param key="textFormat">The text format to consider.</param>
            <returns>Returns the object corresponding to the specified string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.ToEnum``1(System.String,``0)">
            <summary>
            Gets the enumration from the specified string.
            </summary>
            <typeparam name="T">The structure to consider.</typeparam>
            <param key="st">The string to consider.</param>
            <param key="defaultEnum">The default enumeration to consider.</param>
            <returns>Returns the object corresponding to the specified string.</returns>
        </member>
        <member name="M:BindOpen.Data.StringHelper.GetRandomString(System.String,System.String[])">
            <summary>
            Get a random string from the specified string with the specified length.
            </summary>
            <param key="pattern">The pattern to consider.</param>
            <param key="charLists">The lists of chars to consider.</param>
            <returns>A random password with the specified length.</returns>
        </member>
        <member name="T:BindOpen.Data.Items.DescribedDataItemAttribute">
            <summary>
            This class represents an indexed data item attribute.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.DescribedDataItemAttribute.Name">
            <summary>
            The name of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.DescribedDataItemAttribute.Id">
            <summary>
            The ID of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.DescribedDataItemAttribute.Description">
            <summary>
            The description of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.DescribedDataItemAttribute.CreationDate">
            <summary>
            The creation date of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.DescribedDataItemAttribute.LastModificationDate">
            <summary>
            The last modification date of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Items.DescribedDataItemAttribute.#ctor">
            <summary>
            Instantiates a new instance of the DescribedDataItemAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Items.ParameterAttribute">
            <summary>
            This class represents a parameter attribute.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Items.ParameterAttribute.#ctor">
            <summary>
            Instantiates a new instance of the ParameterAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Items.ScalarAttribute">
            <summary>
            This class represents an scalar attribute.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Items.ScalarAttribute.#ctor">
            <summary>
            Instantiates a new instance of the ScalarAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Items.TitledDescribedDataItemAttribute">
            <summary>
            This class represents an indexed data item attribute.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.TitledDescribedDataItemAttribute.Title">
            <summary>
            The title of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Items.TitledDescribedDataItemAttribute.#ctor">
            <summary>
            Instantiates a new instance of the TitledDescribedDataItemAttribute class.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Items.DataValueMode">
            <summary>
            This enumeration represents the data element itemization modes.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.DataValueMode.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.DataValueMode.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.DataValueMode.Valued">
            <summary>
            Valued.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.DataValueMode.Referenced">
            <summary>
            Referenced.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.DataValueMode.Script">
            <summary>
            Script.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Items.DatasourceKind">
            <summary>
            This enumeration represents the data source kinds.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.DatasourceKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.DatasourceKind.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.DatasourceKind.Database">
            <summary>
            Database.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.DatasourceKind.Repository">
            <summary>
            Repository.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.DatasourceKind.RestApi">
            <summary>
            Rest API.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.DatasourceKind.SoapAPI">
            <summary>
            SOAP API.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.DatasourceKind.EmailServer">
            <summary>
            Email server.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.DatasourceKind.Memory">
            <summary>
            Memory.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.DatasourceKind.Console">
            <summary>
            Console.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Items.IBdoDataSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoDataSource.InstanceName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDataSource.WithInstanceName(System.String)">
            <summary>
            Sets the specified module name of this instance. 
            </summary>
            <param key="instanceName">The instance name to consider.</param>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoDataSource.IsDefault">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDataSource.AsDefault(System.Boolean)">
            <summary>
            Specifies that this instance is the default. 
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoDataSource.Kind">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDataSource.WithKind(BindOpen.Data.Items.DatasourceKind)">
            <summary>
            Sets the specified kind of this instance. 
            </summary>
            <param key="kind">The kind to consider.</param>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoDataSource.ModuleName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDataSource.WithModuleName(System.String)">
            <summary>
            Sets the specified module name of this instance. 
            </summary>
            <param key="moduleName">The module name to consider.</param>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoDataSource.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoDataSource.Configurations">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDataSource.GetConfig(System.String)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDataSource.HasConfig(System.String)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDataSource.RemoveConfig(System.String)">
            <summary>
            Removes the specified connector config.
            </summary>
            <param key="name">The name of the connector config to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDataSource.WithConfig(BindOpen.Extensions.Connecting.IBdoConfiguration[])">
            <summary>
            Sets the specified configs.
            </summary>
            <param key="configs">The configs to consider.</param>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDataSource.AddConfig(BindOpen.Extensions.Connecting.IBdoConfiguration)">
            <summary>
            Adds the specified connector config.
            </summary>
            <param key="config">The connector to add.</param>
        </member>
        <member name="T:BindOpen.Data.Items.IBdoDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoDictionary.Item(System.String,System.String)">
            <summary>
            
            </summary>
            <param key="key"></param>
            <param key="defaultKey"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <param key="pair"></param>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDictionary.Add(System.String)">
            <summary>
            
            </summary>
            <param key="text"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDictionary.Add(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param key="key"></param>
            <param key="text"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDictionary.Remove(System.String[])">
            <summary>
            
            </summary>
            <param key="keys"></param>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDictionary.Set(System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <param key="pair"></param>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDictionary.Set(System.String)">
            <summary>
            
            </summary>
            <param key="text"></param>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDictionary.Set(System.String,System.String)">
            <summary>
            
            </summary>
            <param key="key"></param>
            <param key="text"></param>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDictionary.Get(System.String,System.String)">
            <summary>
            
            </summary>
            <param key="key"></param>
            <param key="alternateKey"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDictionary.Equals(BindOpen.Data.Items.IBdoDictionary)">
            <summary>
            
            </summary>
            <param key="dictionary"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Items.IBdoDocument">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoDocument.Container">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoDocument.Content">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDocument.DetectFormat(BindOpen.Data.Items.IBdoDataSource,BindOpen.Logging.IBdoLog@)">
            <summary>
            
            </summary>
            <param key="dataSource"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoDocument.Update(BindOpen.Data.Items.IBdoDocument,System.String)">
            <summary>
            
            </summary>
            <param key="documentDataItem"></param>
            <param key="relativePath"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Items.BdoExpressionKind">
            <summary>
            This enumeration represents the possible kinds for data expression.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.BdoExpressionKind.Auto">
            <summary>
            Literal expression that can be script if it begins by "=".
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.BdoExpressionKind.Literal">
            <summary>
            Literal expression is considered as default. A literal mode can then be applied.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.BdoExpressionKind.Script">
            <summary>
            Script expression is considered as default.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Items.BdoExpressionKind.Word">
            <summary>
            Script word is considered as default.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Items.IBdoExpression">
            <summary>
            This interface defines a data expression.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoExpression.Kind">
            <summary>
            The kind.
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoExpression.Text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoExpression.WithText(System.String)">
            <summary>
            
            </summary>
            <param key="text"></param>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoExpression.Word">
            <summary>
            The script word.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Items.IBdoItem">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Items.IBdoExpression">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoExpression.SourceElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoExpression.RootElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoExpression.SourceObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoExpression.DataHandlerUniqueName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoExpression.PathDetail">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Items.IBdoExpression.TargetObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoExpression.GetDatasource">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Items.IBdoExpression.Get(BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Data.Elements.IBdoElementSet,BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="scope"></param>
            <param key="varSet">The variable element set to consider.</param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Items.ITBdoSet`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BindOpen.Data.Items.ITBdoSet`1.Count">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Data.Items.ITBdoSet`1.Items">
            <summary>
            
            </summary>
            <param key="key"></param>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Data.Items.ITBdoSet`1.Item(System.String)">
            <summary>
            
            </summary>
            <param key="key"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Items.ITBdoSet`1.Get(System.String)">
            <summary>
            Returns the specified item of this instance.
            </summary>
            <param key="key">The key to consider.</param>
            <returns>Returns the item of this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Items.ITBdoSet`1.Get``1(System.String)">
            <summary>
            Returns the specified item of this instance.
            </summary>
            <param key="key">The key to consider.</param>
            <returns>Returns the item of this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Items.ITBdoSet`1.Get``1(System.Int32)">
            <summary>
            Returns the specified item of this instance.
            </summary>
            <param key="index">The index to consider.</param>
            <returns>Returns the item of this instance.</returns>
        </member>
        <member name="M:BindOpen.Data.Items.ITBdoSet`1.ClearItems">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Items.ITBdoSet`1.Add(`0[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="M:BindOpen.Data.Items.ITBdoSet`1.Insert(`0)">
            <summary>
            
            </summary>
            <param key="item"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Items.ITBdoSet`1.With`0[])">
            <summary>
            
            </summary>
            <param key="items"></param>
        </member>
        <member name="M:BindOpen.Data.Items.ITBdoSet`1.HasItem(System.String)">
            <summary>
            
            </summary>
            <param key="key"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Items.ITBdoSet`1.Remove(System.String[])">
            <summary>
            
            </summary>
            <param key="keys"></param>
        </member>
        <member name="M:BindOpen.Data.Items.ITBdoSet`1.ToArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Items.ITBdoSet`1.ToList">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Specification.IBdoConfigurationSet">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Specification.IBdoConfigurationSet.GetConstraint(System.String)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Specification.IBdoConfigurationSet.GetConstraintParameter(System.String,System.String)">
            <summary>
            
            </summary>
            <param key="constraintName"></param>
            <param key="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Specification.IBdoConfigurationSet.GetConstraintParameterValue(System.String,System.String)">
            <summary>
            
            </summary>
            <param key="constraintName"></param>
            <param key="parameterName"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Specification.TextFormatKind">
            <summary>
            This enumeration lists the possible kinds of text formats.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Specification.TextFormatKind.None">
            <summary>
            No format.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Specification.TextFormatKind.Email">
            <summary>
            Email format.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Specification.TextFormatKind.StrongPassword">
            <summary>
            Strong password (Must be at least 10 characters,
            Must contain at least one one lower case letter, one upper case letter, one digit and one special character
            </summary>
        </member>
        <member name="T:BindOpen.Data.Specification.DataAreaKind">
            <summary>
            This enumeration lists the possible kinds of data areas.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Specification.DataAreaKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Specification.DataAreaKind.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Specification.DataAreaKind.Constraints">
            <summary>
            Constraint attributes.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Specification.DataAreaKind.Design">
            <summary>
            Design attribute.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Specification.DataAreaKind.Items">
            <summary>
            Item attribute.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Specification.DataAreaKind.Properties">
            <summary>
            Property attribute.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Specification.IStringFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Specification.IStringFilter.AddedValues">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Specification.IStringFilter.RemovedValues">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Specification.IStringFilter.GetValues(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param key="allValues"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Specification.IStringFilter.IsValueAllowed(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param key="value"></param>
            <param key="allValues"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Specification.IStringFilter.Repair(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param key="allValues"></param>
        </member>
        <member name="T:BindOpen.Data.Specification.IStringFilterStatement">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Specification.IStringFilterStatement.Filters">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Data.Specification.IBdoSpec">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Specification.IBdoSpec.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Specification.IBdoSpec.WithDataValueType(BindOpen.Data.DataValueTypes)">
            <summary>
            
            </summary>
            <param key="number"></param>
        </member>
        <member name="P:BindOpen.Data.Specification.IBdoSpec.AccessibilityLevel">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Specification.IBdoSpec.WithAccessibilityLevel(BindOpen.Data.AccessibilityLevels)">
            <summary>
            
            </summary>
            <param key="level"></param>
        </member>
        <member name="P:BindOpen.Data.Specification.IBdoSpec.InheritanceLevel">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Specification.IBdoSpec.WithInheritanceLevel(BindOpen.Data.InheritanceLevels)">
            <summary>
            
            </summary>
            <param key="level"></param>
        </member>
        <member name="P:BindOpen.Data.Specification.IBdoSpec.RequirementLevel">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Specification.IBdoSpec.WithRequirementLevel(BindOpen.Data.RequirementLevels)">
            <summary>
            
            </summary>
            <param key="level"></param>
        </member>
        <member name="M:BindOpen.Data.Specification.IBdoSpec.AsOptional">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Specification.IBdoSpec.AsRequired">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Specification.IBdoSpec.AsForbidden">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Data.Specification.IBdoSpec.RequirementScript">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Specification.IBdoSpec.WithRequirementScript(System.String)">
            <summary>
            
            </summary>
            <param key="script"></param>
        </member>
        <member name="P:BindOpen.Data.Specification.IBdoSpec.SpecificationLevels">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Specification.IBdoSpec.WithSpecificationLevels(BindOpen.Data.SpecificationLevels[])">
            <summary>
            
            </summary>
            <param key="levels"></param>
        </member>
        <member name="M:BindOpen.Data.Specification.IBdoSpec.IsCompatibleWithData(System.Object)">
            <summary>
            
            </summary>
            <param key="item"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Stores.IBdoDepot">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Stores.IBdoDepot.AddFromAllAssemblies(BindOpen.Logging.IBdoLog)">
            <summary>
            Add the items from all the assemblies.
            </summary>
            <param key="log">The log to append.</param>
        </member>
        <member name="M:BindOpen.Data.Stores.IBdoDepot.AddFromAssembly(System.String,BindOpen.Logging.IBdoLog)">
            <summary>
            Add the items from the specified assembly.
            </summary>
            <param key="assemblyName">The name of the assembly.</param>
            <param key="log">The log to append.</param>
        </member>
        <member name="M:BindOpen.Data.Stores.IBdoDepot.AddFromAssembly``1(BindOpen.Logging.IBdoLog)">
            <summary>
            Add the items from the assembly of the specified type.
            </summary>
            <param key="log">The log to append.</param>
        </member>
        <member name="M:BindOpen.Data.Stores.IBdoDepot.LoadLazy(BindOpen.Logging.IBdoLog)">
            <summary>
            Loads this instance.
            </summary>
            <param key="log">The log to append.</param>
        </member>
        <member name="P:BindOpen.Data.Stores.IBdoDepot.LazyLoadFunction">
            <summary>
            The initialization function.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Stores.IBdoSourceDepot">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.Stores.IBdoSourceDepot.GetConnectorConfiguration(System.String,System.String)">
            <summary>
            
            </summary>
            <param key="sourceName"></param>
            <param key="connectorDefinitionUniqueName"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Stores.IBdoSourceDepot.GetInstanceName(System.String)">
            <summary>
            
            </summary>
            <param key="sourceName"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Stores.IBdoSourceDepot.GetInstanceOtherwiseModuleName(System.String)">
            <summary>
            
            </summary>
            <param key="sourceName"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Stores.IBdoSourceDepot.GetModuleName(System.String)">
            <summary>
            
            </summary>
            <param key="sourceName"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Stores.IBdoSourceDepot.GetConnectionString(System.String,System.String)">
            <summary>
            
            </summary>
            <param key="sourceName"></param>
            <param key="connectorDefinitionUniqueName"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.Stores.IBdoSourceDepot.HasConnectorConfiguration(System.String,System.String)">
            <summary>
            
            </summary>
            <param key="sourceName"></param>
            <param key="connectorDefinitionUniqueName"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.Stores.ITBdoDepot`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:BindOpen.Data.Stores.IBdoDataStore">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Data.Stores.IBdoDataStore.Depots">
            <summary>
            The depots of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Stores.IBdoDataStore.Add``1(``0,System.Action{``0})">
            <summary>
            Adds the specified depot executing the specified action.
            </summary>
            <param key="depot">The depot to consider.</param>
            <param key="action">The action to execute on the newly created depot.</param>
            <typeparam name="T">The depot class to consider.</typeparam>
        </member>
        <member name="M:BindOpen.Data.Stores.IBdoDataStore.Get``1">
            <summary>
            Gets the depot of the specified class.
            </summary>
            <typeparam name="T">The depot class to consider.</typeparam>
        </member>
        <member name="M:BindOpen.Data.Stores.IBdoDataStore.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Data.Stores.IBdoDataStore.LoadLazy(BindOpen.Runtime.Scopes.IBdoScope,BindOpen.Logging.IBdoLog)">
            <summary>
            Executes the lazy functions of all the depots of this instance.
            </summary>
            <param key="scope">The scope to append.</param>
            <param key="log">The log to append.</param>
        </member>
        <member name="T:BindOpen.Data.IBdoDto">
            <summary>
            This interface represents a DTO.
            </summary>
        </member>
        <member name="T:BindOpen.Data.AccessibilityLevels">
            <summary>
            This enumerates the possible levels of accesibility.
            </summary>
        </member>
        <member name="F:BindOpen.Data.AccessibilityLevels.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.AccessibilityLevels.Inherited">
            <summary>
            Inherited.
            </summary>
        </member>
        <member name="F:BindOpen.Data.AccessibilityLevels.Public">
            <summary>
            Anyone can access.
            </summary>
        </member>
        <member name="F:BindOpen.Data.AccessibilityLevels.Private">
            <summary>
            Only authentized people can access.
            </summary>
        </member>
        <member name="F:BindOpen.Data.AccessibilityLevels.Restricted">
            <summary>
            Only allowed people can access.
            </summary>
        </member>
        <member name="F:BindOpen.Data.AccessibilityLevels.Payable">
            <summary>
            Only people who bought for it can access.
            </summary>
        </member>
        <member name="F:BindOpen.Data.AccessibilityLevels.Any">
            <summary>
            Any accessibility level.
            </summary>
        </member>
        <member name="T:BindOpen.Data.ActionPriorities">
            <summary>
            This enumeration lists the possible priorities of actions.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ActionPriorities.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ActionPriorities.Inherited">
            <summary>
            Inherited.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ActionPriorities.Low">
            <summary>
            Low.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ActionPriorities.Medium">
            <summary>
            Medium.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ActionPriorities.High">
            <summary>
            High.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ActionPriorities.VeryHigh">
            <summary>
            Very high.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ActionPriorities.Any">
            <summary>
            Any action priority.
            </summary>
        </member>
        <member name="T:BindOpen.Data.Criticalities">
            <summary>
            This enumeration lists the possible event criticalities.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Criticalities.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Criticalities.Low">
            <summary>
            Low.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Criticalities.Medium">
            <summary>
            Medium.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Criticalities.High">
            <summary>
            High.
            </summary>
        </member>
        <member name="F:BindOpen.Data.Criticalities.VeryHigh">
            <summary>
            Very high.
            </summary>
        </member>
        <member name="T:BindOpen.Data.DataOperators">
            <summary>
            This enumeration represents the possible data operators.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataOperators.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataOperators.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataOperators.Exists">
            <summary>
            Exists.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataOperators.Contains">
            <summary>
            Contains.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataOperators.Has">
            <summary>
            Has.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataOperators.In">
            <summary>
            In.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataOperators.Equal">
            <summary>
            Equal.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataOperators.Different">
            <summary>
            Different.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataOperators.Lesser">
            <summary>
            Lesser.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataOperators.LesserOrEqual">
            <summary>
            Lesser or equal.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataOperators.Greater">
            <summary>
            Greater.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataOperators.GreaterOrEqual">
            <summary>
            Greater or equal.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataOperators.Any">
            <summary>
            Any operator.
            </summary>
        </member>
        <member name="T:BindOpen.Data.DataSortingModes">
            <summary>
            This enumeration represents the data sorting modes.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataSortingModes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataSortingModes.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataSortingModes.Ascending">
            <summary>
            Ascending.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataSortingModes.Descending">
            <summary>
            Descending.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataSortingModes.Random">
            <summary>
            Random.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataSortingModes.Any">
            <summary>
            Any data sorting mode.
            </summary>
        </member>
        <member name="T:BindOpen.Data.DataValueTypes">
            <summary>
            This enumeration represents the possible data value types.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Boolean">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Entity">
            <summary>
            Data entity.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Connector">
            <summary>
            Connector.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Datasource">
            <summary>
            Data source.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Element">
            <summary>
            Element.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Entity">
            <summary>
            Entity.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Date">
            <summary>
            Date.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Document">
            <summary>
            Document.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Integer">
            <summary>
            Integer.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Long">
            <summary>
            Long.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.ULong">
            <summary>
            Ultra long.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.ByteArray">
            <summary>
            Byte array.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Number">
            <summary>
            Number value.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Object">
            <summary>
            Object.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Schema">
            <summary>
            Schema.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.SchemaZone">
            <summary>
            Schema zone.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Time">
            <summary>
            Time.
            </summary>
        </member>
        <member name="F:BindOpen.Data.DataValueTypes.Any">
            <summary>
            Any data value type.
            </summary>
        </member>
        <member name="T:BindOpen.Data.DataValueTypesExtensions">
            <summary>
            This class represents an extension of the DataValueType enumeration.
            </summary>
        </member>
        <member name="M:BindOpen.Data.DataValueTypesExtensions.IsScalar(BindOpen.Data.DataValueTypes)">
            <summary>
            Indicates whether the specified value type corresponds to a scalar.
            </summary>
            <param key="valueType">The object to consider.</param>
            <returns>The result object.</returns>
        </member>
        <member name="M:BindOpen.Data.DataValueTypesExtensions.IsScalar(System.Object)">
            <summary>
            Indicates whether the specified value type corresponds to a scalar.
            </summary>
            <param key="obj">The object to consider.</param>
            <returns>The result object.</returns>
        </member>
        <member name="M:BindOpen.Data.DataValueTypesExtensions.IsCompatibleWithBindOpen.Data.DataValueTypes,BindOpen.Data.DataValueTypes)">
            <summary>
            Returns the value type of the specified object.
            </summary>
            <param key="valueType">The value type to consider.</param>
            <param key="refValueType">The value type to consider.</param>
            <returns>The result object.</returns>
        </member>
        <member name="M:BindOpen.Data.DataValueTypesExtensions.GetValueType(System.Type)">
            <summary>
            Returns the value type of the specified object.
            </summary>
            <param key="type">The type to consider.</param>
            <returns>The result object.</returns>
        </member>
        <member name="M:BindOpen.Data.DataValueTypesExtensions.GetValueType(System.Object,System.Int32)">
            <summary>
            Returns the value type of the specified object.
            </summary>
            <param key="obj">The object to consider.</param>
            <param key="guessRowCount">The number of items used to guess the object's value type if it is a list.</param>
            <returns>The result object.</returns>
        </member>
        <member name="T:BindOpen.Data.InheritanceLevels">
            <summary>
            This enumeration represents the possible levels of inheritance.
            </summary>
        </member>
        <member name="F:BindOpen.Data.InheritanceLevels.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.InheritanceLevels.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:BindOpen.Data.InheritanceLevels.Heritable">
            <summary>
            Heritable.
            </summary>
        </member>
        <member name="F:BindOpen.Data.InheritanceLevels.Inherited">
            <summary>
            Inherited.
            </summary>
        </member>
        <member name="F:BindOpen.Data.InheritanceLevels.Any">
            <summary>
            Any inherintance level.
            </summary>
        </member>
        <member name="T:BindOpen.Data.PersistenceLevels">
            <summary>
            This enumeration represents the possible persistence levels.
            </summary>
        </member>
        <member name="F:BindOpen.Data.PersistenceLevels.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.PersistenceLevels.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:BindOpen.Data.PersistenceLevels.Singleton">
            <summary>
            The information remains alive.
            </summary>
        </member>
        <member name="F:BindOpen.Data.PersistenceLevels.Scoped">
            <summary>
            The information remains alive until the session ends.
            </summary>
        </member>
        <member name="F:BindOpen.Data.PersistenceLevels.Transient">
            <summary>
            The information remains alive until the request ends.
            </summary>
        </member>
        <member name="F:BindOpen.Data.PersistenceLevels.Any">
            <summary>
            Any the persistence level.
            </summary>
        </member>
        <member name="T:BindOpen.Data.ProcessExecutionState">
            <summary>
            This enumeration represents the possible process execution states.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ProcessExecutionState.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ProcessExecutionState.Pending">
            <summary>
            Pending.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ProcessExecutionState.Ended">
            <summary>
            Ended.
            </summary>
        </member>
        <member name="T:BindOpen.Data.ProcessExecutionStatus">
            <summary>
            This enumeration represents the possible process execution statuses.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ProcessExecutionStatus.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ProcessExecutionStatus.NothingDone">
            <summary>
            Nothing done.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ProcessExecutionStatus.Processing">
            <summary>
            Processing.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ProcessExecutionStatus.Waiting">
            <summary>
            Waiting.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ProcessExecutionStatus.Queueing">
            <summary>
            Queueing.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ProcessExecutionStatus.Stopped">
            <summary>
            Stopped.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ProcessExecutionStatus.Stopped_Exception">
            <summary>
            Stopped with exceptions (system error).
            </summary>
        </member>
        <member name="F:BindOpen.Data.ProcessExecutionStatus.Stopped_Error">
            <summary>
            Stopped with errors (config error).
            </summary>
        </member>
        <member name="F:BindOpen.Data.ProcessExecutionStatus.Stopped_User">
            <summary>
            Stopped by user.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ProcessExecutionStatus.Completed">
            <summary>
            Completed.
            </summary>
        </member>
        <member name="T:BindOpen.Data.RequirementLevels">
            <summary>
            This enumeration represents the possible levels of requirement.
            </summary>
        </member>
        <member name="F:BindOpen.Data.RequirementLevels.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.RequirementLevels.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:BindOpen.Data.RequirementLevels.Forbidden">
            <summary>
            Forbidden.
            </summary>
        </member>
        <member name="F:BindOpen.Data.RequirementLevels.Optional">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="F:BindOpen.Data.RequirementLevels.Required">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:BindOpen.Data.RequirementLevels.Any">
            <summary>
            Any the requirement level.
            </summary>
        </member>
        <member name="T:BindOpen.Data.RequirementLevelsExtensions">
            <summary>
            This class represents an extension of the RequirementLevels enumeration.
            </summary>
        </member>
        <member name="M:BindOpen.Data.RequirementLevelsExtensions.IsPossible(BindOpen.Data.RequirementLevels)">
            <summary>
            Indicates whether the specified requirement level means that it is possible.
            </summary>
            <param key="requirementLevel">The requirement level to consider.</param>
            <returns>The result object.</returns>
        </member>
        <member name="T:BindOpen.Data.ResourceStatus">
            <summary>
            This enumeration lists all the possible statuses of resource.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ResourceStatus.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ResourceStatus.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ResourceStatus.Created">
            <summary>
            Created.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ResourceStatus.Updated">
            <summary>
            Updated.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ResourceStatus.Patched">
            <summary>
            Patched.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ResourceStatus.Deleted">
            <summary>
            Deleted.
            </summary>
        </member>
        <member name="F:BindOpen.Data.ResourceStatus.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="T:BindOpen.Data.RuntimeModes">
            <summary>
            This enumerates the possible modes of runtime.
            </summary>
        </member>
        <member name="F:BindOpen.Data.RuntimeModes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.RuntimeModes.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:BindOpen.Data.RuntimeModes.Normal">
            <summary>
            Normal. No exception and error messages are displayed.
            </summary>
        </member>
        <member name="F:BindOpen.Data.RuntimeModes.Debug">
            <summary>
            Debug. Exception and error messages are displayed.
            </summary>
        </member>
        <member name="F:BindOpen.Data.RuntimeModes.Simulation">
            <summary>
            Simulation. Everything is executed empty.
            </summary>
        </member>
        <member name="F:BindOpen.Data.RuntimeModes.Any">
            <summary>
            Any runtime mode.
            </summary>
        </member>
        <member name="T:BindOpen.Data.SpecificationLevels">
            <summary>
            This enumeration represents the possible levels of specification.
            </summary>
        </member>
        <member name="F:BindOpen.Data.SpecificationLevels.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.SpecificationLevels.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:BindOpen.Data.SpecificationLevels.Definition">
            <summary>
            Definition.
            </summary>
        </member>
        <member name="F:BindOpen.Data.SpecificationLevels.Design">
            <summary>
            Design.
            </summary>
        </member>
        <member name="F:BindOpen.Data.SpecificationLevels.Configuration">
            <summary>
            Configuration.
            </summary>
        </member>
        <member name="F:BindOpen.Data.SpecificationLevels.Runtime">
            <summary>
            Runtime.
            </summary>
        </member>
        <member name="F:BindOpen.Data.SpecificationLevels.Any">
            <summary>
            Any specification level.
            </summary>
        </member>
        <member name="T:BindOpen.Data.SpecificationLevelExtensions">
            <summary>
            This class represents an specification level extension.
            </summary>
        </member>
        <member name="M:BindOpen.Data.SpecificationLevelExtensions.Has(BindOpen.Data.SpecificationLevels[],BindOpen.Data.SpecificationLevels)">
            <summary>
            Indicates whether the specified specification level list contains the specified specification level.
            </summary>
            <param key="specificationLevels">The specified specification level list to consider.</param>
            <param key="specificationLevel">The specified specification level to consider.</param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.SpecificationLevelExtensions.Has(BindOpen.Data.SpecificationLevels[],BindOpen.Data.SpecificationLevels[])">
            <summary>
            Indicates whether the specified specification level list contains the specified specification level.
            </summary>
            <param key="specificationLevels">The specified specification level list to consider.</param>
            <param key="referenceSpecificationLevels">The specified reference specification levels to consider.</param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.SpecificationLevelExtensions.Excluding(BindOpen.Data.SpecificationLevels[],BindOpen.Data.SpecificationLevels[])">
            <summary>
            Gets the specified list excluding the second specified list.
            </summary>
            <param key="specificationLevels">The specification levels to consider.</param>
            <param key="excludingSpecificationLevels">The excluding specification levels to consider.</param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.SpecificationLevelExtensions.Excluding(BindOpen.Data.SpecificationLevels,BindOpen.Data.SpecificationLevels[])">
            <summary>
            Gets the specified list excluding the secong specified list.
            </summary>
            <param key="specificationLevel">The specification level to consider.</param>
            <param key="excludingSpecificationLevels">The excluding specification levels to consider.</param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.UpdateModes">
            <summary>
            This enumeration represents the possible update modes.
            </summary>
        </member>
        <member name="F:BindOpen.Data.UpdateModes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Data.UpdateModes.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:BindOpen.Data.UpdateModes.Incremental_AddMissingInTarget">
            <summary>
            Adds Source items that are not in Target.
            </summary>
            <remarks>Used in incremental update.</remarks>
        </member>
        <member name="F:BindOpen.Data.UpdateModes.Incremental_RemoveMissingInSource">
            <summary>
            Removes Target items that are not in Source.
            </summary>
            <remarks>Used in incremental update.</remarks>
        </member>
        <member name="F:BindOpen.Data.UpdateModes.Incremental_UpdateCommon">
            <summary>
            Updates Target items that are in Source.
            </summary>
            <remarks>Used in incremental update.</remarks>
        </member>
        <member name="F:BindOpen.Data.UpdateModes.Full">
            <summary>
            Full update mode.
            </summary>
            <remarks>Used in full update.</remarks>
        </member>
        <member name="T:BindOpen.Data.UpdateModesExtensions">
            <summary>
            This class represents an update mode extension.
            </summary>
        </member>
        <member name="M:BindOpen.Data.UpdateModesExtensions.Has(BindOpen.Data.UpdateModes[],BindOpen.Data.UpdateModes)">
            <summary>
            Indicates whether the specified update mode list contains the specified update mode.
            </summary>
            <param key="updateModes">The specified update mode list to consider.</param>
            <param key="updateMode">The specified update mode to consider.</param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.UpdateModesExtensions.Excluding(BindOpen.Data.UpdateModes[],BindOpen.Data.UpdateModes[])">
            <summary>
            Gets the specified list excluding the second specified list.
            </summary>
            <param key="updateModes">The update modes to consider.</param>
            <param key="excludingUpdateModes">The excluding update modes to consider.</param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.UpdateModesExtensions.Excluding(BindOpen.Data.UpdateModes,BindOpen.Data.UpdateModes[])">
            <summary>
            Gets the specified list excluding the secong specified list.
            </summary>
            <param key="updateMode">The update mode to consider.</param>
            <param key="excludingUpdateModes">The excluding update modes to consider.</param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.ICheckable">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.ICheckable.Check(System.Boolean,System.String[],BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="isExistenceChecked"></param>
            <param key="areas"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.ICheckable.Check``1(System.Boolean,``0,System.String[],BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param key="isExistenceChecked"></param>
            <param key="item"></param>
            <param key="areas"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.IClonable">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.IClonable.Clone(System.String[])">
            <summary>
            Clones this instance.
            </summary>
            <param key="areas">The areas to consider.</param>
            <returns>Returns a cloned instance.</returns>
        </member>
        <member name="M:BindOpen.Data.IClonable.Clone``1(System.String[])">
            <summary>
            Clones this instance.
            </summary>
            <param key="areas">The areas to consider.</param>
            <returns>Returns a cloned instance.</returns>
        </member>
        <member name="T:BindOpen.Data.IDescribed">
            <summary>
            This interface represents a described data.
            </summary>
        </member>
        <member name="P:BindOpen.Data.IDescribed.Description">
            <summary>
            The description of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Data.IDetailed">
            <summary>
            This interface represents a data with detail.
            </summary>
        </member>
        <member name="P:BindOpen.Data.IDetailed.Detail">
            <summary>
            The detail of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Data.IDisplayNamed">
            <summary>
            This interface represents a display named data.
            </summary>
        </member>
        <member name="P:BindOpen.Data.IDisplayNamed.DisplayName">
            <summary>
            The display name of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Data.IGloballyDescribed">
            <summary>
            This interface represents a globally described data.
            </summary>
        </member>
        <member name="P:BindOpen.Data.IGloballyDescribed.Description">
            <summary>
            The global description of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Data.IGloballyTitled">
            <summary>
            This interface represents a globally titled data.
            </summary>
        </member>
        <member name="P:BindOpen.Data.IGloballyTitled.Title">
            <summary>
            The global title of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Data.IIdentified">
            <summary>
            This interface represents an identified data.
            </summary>
        </member>
        <member name="P:BindOpen.Data.IIdentified.Id">
            <summary>
            ID of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Data.IIndexed">
            <summary>
            This interface represents an indexed data.
            </summary>
        </member>
        <member name="P:BindOpen.Data.IIndexed.Index">
            <summary>
            The index of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Data.ILockable">
            <summary>
            This interface defines a lockable data.
            </summary>
        </member>
        <member name="P:BindOpen.Data.ILockable.IsLocked">
            <summary>
            Indicates whether this instance is locked.
            </summary>
        </member>
        <member name="M:BindOpen.Data.ILockable.Lock(System.Boolean)">
            <summary>
            Locks this instance.
            </summary>
            <param key="isRecursive">Indicates whether the protection is applied to sub objects.</param>
        </member>
        <member name="M:BindOpen.Data.ILockable.Unlock(System.Boolean)">
            <summary>
            Unlocks this instance.
            </summary>
            <param key="isRecursive">Indicates whether the protection is applied to sub objects.</param>
        </member>
        <member name="T:BindOpen.Data.INamed">
            <summary>
            This interface represents a named data.
            </summary>
        </member>
        <member name="P:BindOpen.Data.INamed.Name">
            <summary>
            The name of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Data.IReferenced">
            <summary>
            This interface represents an referenced DTO.
            </summary>
        </member>
        <member name="M:BindOpen.Data.IReferenced.Key">
            <summary>
            Gets the key of the item.
            </summary>
            <returns>Returns the key of the item.</returns>
        </member>
        <member name="T:BindOpen.Data.IRepairable">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.IRepairable.Repair(System.String[],BindOpen.Data.UpdateModes[],BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="areas"></param>
            <param key="updateModes"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.IRepairable.Repair``1(``0,System.String[],BindOpen.Data.UpdateModes[],BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param key="item"></param>
            <param key="areas"></param>
            <param key="updateModes"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.IStorable">
            <summary>
            This interface defines a storable data.
            </summary>
        </member>
        <member name="P:BindOpen.Data.IStorable.CreationDate">
            <summary>
            Creation date of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Data.IStorable.LastModificationDate">
            <summary>
            Last modification date of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Data.IUnique">
            <summary>
            This interface represents an unique data.
            </summary>
        </member>
        <member name="P:BindOpen.Data.IUnique.UniqueName">
            <summary>
            Unique name of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Data.IUpdatable">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Data.IUpdatable.Update(System.String[],BindOpen.Data.UpdateModes[],BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <param key="areas"></param>
            <param key="updateModes"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.IUpdatable.Update``1(``0,System.String[],BindOpen.Data.UpdateModes[],BindOpen.Logging.IBdoLog)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param key="item"></param>
            <param key="areas"></param>
            <param key="updateModes"></param>
            <param key="log"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Data.ITBdoPoco`1">
            <summary>
            This interface represents a POCO based on a DTO.
            </summary>
        </member>
        <member name="P:BindOpen.Data.ITBdoPoco`1.Dto">
            <summary>
            The DTO of this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Data.ITDetailedPoco`1">
            <summary>
            This interface represents a named data.
            </summary>
        </member>
        <member name="M:BindOpen.Data.ITDetailedPoco`1.WithDetail(BindOpen.Data.Elements.IBdoElementSet)">
            <summary>
            
            </summary>
            <param key="detail"></param>
        </member>
        <member name="M:BindOpen.Data.ITDetailedPoco`1.WithDetail(BindOpen.Data.Elements.IBdoDataElement[])">
            <summary>
            
            </summary>
            <param key="detail"></param>
        </member>
        <member name="T:BindOpen.Data.ITGloballyDescribedPoco`1">
            <summary>
            This interface represents an described data item.
            </summary>
        </member>
        <member name="M:BindOpen.Data.ITGloballyDescribedPoco`1.AddDescription(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            
            </summary>
            <param key="key"></param>
            <param key="text"></param>
        </member>
        <member name="M:BindOpen.Data.ITGloballyDescribedPoco`1.WithDescription(BindOpen.Data.Items.IBdoDictionary)">
            <summary>
            
            </summary>
            <param key="dictionary"></param>
        </member>
        <member name="M:BindOpen.Data.ITGloballyDescribedPoco`1.GetDescriptionText(System.String,System.String)">
            <summary>
            Returns the description label.
            </summary>
            <param key="key">The key to consider.</param>
            <param key="defaultKey">The default variant name to consider.</param>
        </member>
        <member name="T:BindOpen.Data.ITGloballyTitledPoco`1">
            <summary>
            This interface represents an described data item.
            </summary>
        </member>
        <member name="M:BindOpen.Data.ITGloballyTitledPoco`1.AddTitle(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            
            </summary>
            <param key="key"></param>
            <param key="text"></param>
        </member>
        <member name="M:BindOpen.Data.ITGloballyTitledPoco`1.WithTitle(BindOpen.Data.Items.IBdoDictionary)">
            <summary>
            
            </summary>
            <param key="title"></param>
        </member>
        <member name="M:BindOpen.Data.ITGloballyTitledPoco`1.GetTitleText(System.String,System.String)">
            <summary>
            Returns the description label.
            </summary>
            <param key="key">The key to consider.</param>
            <param key="defaultKey">The default variant name to consider.</param>
        </member>
        <member name="T:BindOpen.Data.ITIdentifiedPoco`1">
            <summary>
            This interface represents an identified data item.
            </summary>
        </member>
        <member name="M:BindOpen.Data.ITIdentifiedPoco`1.WithId(System.String)">
            <summary>
            
            </summary>
            <param key="id"></param>
        </member>
        <member name="T:BindOpen.Data.ITIndexedPoco`1">
            <summary>
            This interface represents a indexed data.
            </summary>
        </member>
        <member name="M:BindOpen.Data.ITIndexedPoco`1.WithIndex(System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param key="index"></param>
        </member>
        <member name="T:BindOpen.Data.ITNamedPoco`1">
            <summary>
            This interface represents an named data item.
            </summary>
        </member>
        <member name="M:BindOpen.Data.ITNamedPoco`1.WithName(System.String)">
            <summary>
            
            </summary>
            <param key="name"></param>
        </member>
        <member name="T:BindOpen.Data.IStorable`1">
            <summary>
            This interface defines a storable data item.
            </summary>
        </member>
        <member name="M:BindOpen.Data.IStorable`1.WithCreationDate(System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param key="date"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Data.IStorable`1.WithLastModificationDate(System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param key="date"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Abstractions.Meta.Configuration.IBdoConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Abstractions.Meta.Configuration.IBdoConfiguration.UsedItemIds">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Abstractions.Meta.Configuration.IBdoConfiguration.Using(System.String[])">
            <summary>
            
            </summary>
            <param key="ids"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Abstractions.Meta.Configuration.IBdoConfigurationSet">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Assemblies.IAppDomainPool">
            <summary>
            This interface defines an assembly pool.
            </summary>
        </member>
        <member name="M:BindOpen.Runtime.Assemblies.IAppDomainPool.GetAppDomain(System.String)">
            <summary>
            Gets the specified application domain.
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoEntityDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoEntityDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoHandlerDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoExtensionDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.ITBdoExtensionDictionary`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BindOpen.Runtime.Definition.ITBdoExtensionDictionary`1.Definitions">
            <summary>
            The definitions.
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.ITBdoExtensionDictionary`1.Groups">
            <summary>
            The groups.
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.ITBdoExtensionDictionary`1.LibraryId">
            <summary>
            ID of library.
            </summary>
        </member>
        <member name="M:BindOpen.Runtime.Definition.ITBdoExtensionDictionary`1.WithLibraryId(System.String)">
            <summary>
            
            </summary>
            <param key="libraryId"></param>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Runtime.Definition.ITBdoExtensionDictionary`1.LibraryName">
            <summary>
            Name of library.
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoFunctionDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoRoutineDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoScriptwordDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoScriptwordDictionary.DefinitionClass">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Runtime.Definition.IBdoScriptwordDictionary.GetDefinition(System.String,System.String,BindOpen.Extensions.Scripting.IBdoScriptwordDefinition)">
            <summary>
            
            </summary>
            <param key="definitionName"></param>
            <param key="methodName"></param>
            <param key="parent"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoTaskDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoPackageDefinition">
            <summary>
            This interface defines the extension definition.
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoPackageDefinition.AssemblyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoPackageDefinition.FileName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Runtime.Definition.IBdoPackageDefinition.GetRootNamespace">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoPackageDefinition.GroupName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Runtime.Definition.IBdoPackageDefinition.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoPackageDefinition.ItemIndexFullNameDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoPackageDefinition.RootNamespace">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoPackageDefinition.UniqueName">
            <summary>
            The unique ID of this instance.
            </summary> 
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoPackageDefinition.UsingAssemblyFileNames">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.BdoExtensionKind">
            <summary>
            This enumeration represents the possible kinds of library items.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionKind.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionKind.Task">
            <summary>
            Task.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionKind.Entity">
            <summary>
            Entity.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionKind.Connector">
            <summary>
            Connector.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionKind.Entity">
            <summary>
            Entity.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionKind.Format">
            <summary>
            Format.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionKind.Handler">
            <summary>
            Handler.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionKind.Function">
            <summary>
            Function.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionKind.Routine">
            <summary>
            RoutineConfiguration.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionKind.Scriptword">
            <summary>
            Script word.
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.BdoExtensionViewerKind">
            <summary>
            This enumeration represents the possible kinds of library item viewers.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionViewerKind.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionViewerKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionViewerKind.Connector">
            <summary>
            Connector.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionViewerKind.Function">
            <summary>
            Function.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionViewerKind.Scriptword">
            <summary>
            Script word.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionViewerKind.Task">
            <summary>
            Task.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionViewerKind.DataQuery">
            <summary>
            Data query.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionViewerKind.DataClass">
            <summary>
            Data class.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoExtensionViewerKind.FormatConfiguration">
            <summary>
            Data format.
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoEntityDefinition">
            <summary>
            This interface defines the entity definition.
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoEntityDefinition.RuntimeType">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoEntityDefinition.DatasourceKind">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoEntityDefinition.ItemClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoEntityDefinition.DetailSpec">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoConnectorDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoConnectorDefinition.RuntimeType">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoConnectorDefinition.DatasourceKind">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoConnectorDefinition.DatasourceDetailSpec">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoConnectorDefinition.ItemClass">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.BdoEntityKind">
            <summary>
            This enumeration lists all the possible kinds of carriers.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoEntityKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoEntityKind.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoEntityKind.Entity">
            <summary>
            Data entity.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoEntityKind.Zone">
            <summary>
            Data zone.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.BdoEntityKind.SimpleItem">
            <summary>
            Simple item.
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoEntityDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoEntityDefinition.RuntimeType">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoEntityDefinition.FormatDefinitions">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoEntityDefinition.ItemClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoEntityDefinition.Kind">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoEntityDefinition.PossibleMetaSchemas">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoEntityDefinition.ViewerClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoEntityDefinition.DetailSpec">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Runtime.Definition.IBdoEntityDefinition.GetFormatWithId(System.String)">
            <summary>
            
            </summary>
            <param key="id"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Runtime.Definition.IBdoEntityDefinition.GetFormatWithName(System.String)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Runtime.Definition.IBdoEntityDefinition.GetFormatWithUniqueName(System.String)">
            <summary>
            
            </summary>
            <param key="uniqueName"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoFormatDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoFormatDefinition.RuntimeType">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoFormatDefinition.DatasourceKind">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoFormatDefinition.ItemClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoFormatDefinition.ViewerClass">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.BdoHandlerGetFunction">
            <summary>
            This delegate represents a handler GET function.
            </summary>
            <param key="sourceElement">The source element to consider.</param>
            <param key="pathDetail">The path detail to consider.</param>
            <param key="scope">The scope to consider.</param>
            <param key="varSet">The variable element set to consider.</param>
            <param key="alog">The log to consider.</param>
            <returns>Returns the target objects.</returns>
        </member>
        <member name="T:BindOpen.Runtime.Definition.BdoHandlerPostFunction">
            <summary>
            This delegate represents a handler POST function.
            </summary>
            <param key="targetObject">The target object to consider.</param>
            <param key="sourceBdoElement">The source data element to consider.</param>
            <param key="scope">The scope to consider.</param>
            <param key="varSet">The variable element set to consider.</param>
            <param key="alog">The log to consider.</param>
            <returns>Returns the source object.</returns>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoHandlerDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoHandlerDefinition.RuntimeFunctionGet">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoHandlerDefinition.RuntimeFunctionPost">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoHandlerDefinition.CallingClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoHandlerDefinition.GetFunctionName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoHandlerDefinition.ParameterSpecification">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoHandlerDefinition.PostFunctionName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoHandlerDefinition.SourceSpecification">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoHandlerDefinition.TargetSpecification">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoExtensionDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoExtensionDefinition.PackageDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoExtensionDefinition.UniqueName">
            <summary>
            The unique ID of this instance.
            </summary> 
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoExtensionDefinition.ImageUri">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoExtensionDefinition.IsEditable">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoExtensionDefinition.IsIndexed">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoExtensionDefinition.LibraryId">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoFunctionDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoFunctionDefinition.RuntimeType">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoFunctionDefinition.ItemClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoFunctionDefinition.UnitCode">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoRoutineDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoRoutineDefinition.RuntimeType">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoRoutineDefinition.ItemClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoRoutineDefinition.OutputResultCodes">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoRoutineDefinition.ParameterStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IDataSchema">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IDataSchema.MetaSchemaReference">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IDataSchema.RootZone">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Runtime.Definition.IDataSchema.GetElementWithId(System.String,BindOpen.Data.Elements.Schema.IBdoDataSchema)">
            <summary>
            
            </summary>
            <param key="id"></param>
            <param key="parentMetobject1"></param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Runtime.Definition.IBdoTaskDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoTaskDefinition.RuntimeType">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoTaskDefinition.ItemClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoTaskDefinition.GroupName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoTaskDefinition.InputSpecification">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoTaskDefinition.OutputSpecification">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoTaskDefinition.MaximumIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Definition.IBdoTaskDefinition.IsExecutable">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Runtime.Definition.IBdoTaskDefinition.GetEntries(BindOpen.Runtime.Definition.TaskEntryKind[])">
            <summary>
            
            </summary>
            <param key="taskEntryKinds"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Runtime.Definition.IBdoTaskDefinition.GetEntryDefaultItemWithName(System.String,BindOpen.Logging.IBdoLog,BindOpen.Runtime.Definition.TaskEntryKind[])">
            <summary>
            
            </summary>
            <param key="name"></param>
            <param key="log"></param>
            <param key="taskEntryKinds"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Runtime.Definition.IBdoTaskDefinition.GetEntryWithName(System.String,BindOpen.Runtime.Definition.TaskEntryKind[])">
            <summary>
            
            </summary>
            <param key="key"></param>
            <param key="taskEntryKinds"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Runtime.Definition.IBdoTaskDefinition.Repair(BindOpen.Runtime.Definition.IBdoTaskDefinition)">
            <summary>
            
            </summary>
            <param key="taskDefinition"></param>
        </member>
        <member name="T:BindOpen.Runtime.Definition.TaskEntryKind">
            <summary>
            This enumeration represents the possible task entry kinds.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.TaskEntryKind.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.TaskEntryKind.Input">
            <summary>
            Input.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.TaskEntryKind.Output">
            <summary>
            Output.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.TaskEntryKind.ScalarOutput">
            <summary>
            Scalar output.
            </summary>
        </member>
        <member name="F:BindOpen.Runtime.Definition.TaskEntryKind.NonScalarOutput">
            <summary>
            Non-scalar output.
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Definition.TaskEntryKindExtension">
            <summary>
            This class represents an extension of the TaskEntryKind enumeration.
            </summary>
        </member>
        <member name="M:BindOpen.Runtime.Definition.TaskEntryKindExtension.GetTitle(BindOpen.Runtime.Definition.TaskEntryKind)">
            <summary>
            Returns the title of the specified entry kind.
            </summary>
            <param key="taskEntryKind">The entry kind to consider.</param>
            <returns>The result object.</returns>
        </member>
        <member name="T:BindOpen.Runtime.References.IBdoAssemblyReference">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.References.IBdoAssemblyReference.Name">
            <summary>
            The library name of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.References.IBdoAssemblyReference.Version">
            <summary>
            The library version of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.References.IBdoAssemblyReference.FileName">
            <summary>
            The file name of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Runtime.References.IBdoAssemblyReference.WithFileName(System.String)">
            <summary>
            Sets the file name of this instance.
            </summary>
            <param key="fileName"></param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="T:BindOpen.Runtime.References.IBdoAssemblyReferenceCollection">
            <summary>
            This class represents a data reference.
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Scopes.IBdoScope">
            <summary>
            This interface defines an application scope.
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Scopes.IBdoScope.AppDomain">
            <summary>
            The application domain.
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Scopes.IBdoScope.ExtensionStore">
            <summary>
            The extension item definition store.
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Scopes.IBdoScope.DataStore">
            <summary>
            The data store of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Scopes.IBdoScope.Context">
            <summary>
            The data context.
            </summary>
        </member>
        <member name="M:BindOpen.Runtime.Scopes.IBdoScope.NewScriptInterpreter">
            <summary>
            Creates a new script interpreter.
            </summary>
            <returns>Returns the new script interpreter.</returns>
        </member>
        <member name="M:BindOpen.Runtime.Scopes.IBdoScope.LoadExtensions(BindOpen.Runtime.References.IBdoAssemblyReference[],BindOpen.Logging.IBdoLog)">
            <summary>
            Loads the specified extensions.
            </summary>
            <param key="references">The extension references to consider.</param>
            <param key="log"></param>
        </member>
        <member name="M:BindOpen.Runtime.Scopes.IBdoScope.LoadExtensions(BindOpen.Runtime.References.IBdoAssemblyReference[])">
            <summary>
            Loads the specified extensions.
            </summary>
            <param key="references">The extension references to consider.</param>
        </member>
        <member name="M:BindOpen.Runtime.Scopes.IBdoScope.LoadExtensions(System.Func{BindOpen.Runtime.Scopes.IExtensionLoadOptions,System.Boolean},BindOpen.Runtime.References.IBdoAssemblyReference[],BindOpen.Logging.IBdoLog)">
            <summary>
            Loads the specified extensions.
            </summary>
            <param key="loadOptionsAction">The load options action to consider.</param>
            <param key="references">The extension references to consider.</param>
            <param key="log"></param>
        </member>
        <member name="M:BindOpen.Runtime.Scopes.IBdoScope.LoadExtensions(System.Func{BindOpen.Runtime.Scopes.IExtensionLoadOptions,System.Boolean},BindOpen.Runtime.References.IBdoAssemblyReference[])">
            <summary>
            Loads the specified extensions.
            </summary>
            <param key="loadOptionsAction">The load options action to consider.</param>
            <param key="references">The extension references to consider.</param>
        </member>
        <member name="M:BindOpen.Runtime.Scopes.IBdoScope.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Scopes.IBdoScoped">
            <summary>
            This interfaces represents a scoped service.
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Scopes.IBdoScoped.Scope">
            <summary>
            The scope of the service.
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Scopes.IExtensionLoadOptions">
            <summary>
            This interface defines the extension loading options.
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Scopes.IExtensionLoadOptions.LibraryFolderPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Scopes.IExtensionLoadOptions.RemoteServerUri">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.Scopes.IExtensionLoadOptions.SourceKinds">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Runtime.Scopes.IExtensionLoadOptions.WithLibraryFolderPath(System.String)">
            <summary>
            Sets the path of the library folder of this instance.
            </summary>
            <param key="folderPath"></param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Runtime.Scopes.IExtensionLoadOptions.WithRemoteServerUri(System.String)">
            <summary>
            Sets the URI of the remote server of this instance.
            </summary>
            <param key="uri">The URI of the remote server.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Runtime.Scopes.IExtensionLoadOptions.WithSourceKinds(BindOpen.Data.Items.DatasourceKind[])">
            <summary>
            Sets the source kinds of this instance.
            </summary>
            <param key="sourceKinds">The source kinds to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="T:BindOpen.Runtime.Scopes.ITBdoScoped`1">
            <summary>
            This interfaces represents a scoped service.
            </summary>
        </member>
        <member name="M:BindOpen.Runtime.Scopes.ITBdoScoped`1.WithScope(BindOpen.Runtime.Scopes.IBdoScope)">
            <summary>
            Sets the specified scope.
            </summary>
            <param key="scope">The scope to consider.</param>
        </member>
        <member name="T:BindOpen.Runtime.Stores.IBdoExtensionStore">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Runtime.Stores.IBdoExtensionStore.Add``1(``0)">
            <summary>
            Adds the specified definition.
            </summary>
            <typeparam name="T">The BindOpen extension item definition class to consider.</typeparam>
            <param key="definition">The definition to add.</param>
        </member>
        <member name="M:BindOpen.Runtime.Stores.IBdoExtensionStore.GetItemDefinitions``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Runtime.Stores.IBdoExtensionStore.GetItemDefinitionEnumerables``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Runtime.Stores.IBdoExtensionStore.GetItemDefinitionWithUniqueName``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param key="uniqueName"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Runtime.Stores.IBdoExtensionStore.GetScriptwordDefinitionWithUniqueName(System.String,BindOpen.Extensions.Scripting.IBdoScriptwordDefinition)">
            <summary>
            
            </summary>
            <param key="uniqueName"></param>
            <param key="parentDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Runtime.Stores.IBdoExtensionStore.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Runtime.Stores.IBdoExtensionStoreLoader">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Runtime.Stores.IBdoExtensionStoreLoader.LoadExtensionsInStore(BindOpen.Runtime.References.IBdoAssemblyReference[],BindOpen.Logging.IBdoLog)">
            <summary>
            Loads the specified extensions into the specified scope.
            </summary>
            <param key="references">The library references to consider.</param>
            <param key="log">The log to populate.</param>
        </member>
        <member name="T:BindOpen.Runtime.IBdoExtensionGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Runtime.IBdoExtensionGroup.SubGroups">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Runtime.IBdoExtensionGroup.GetGroupWithName(System.String)">
            <summary>
            
            </summary>
            <param key="name"></param>
            <returns></returns>
        </member>
    </members>
</doc>
